package p_minipascal;
import necessities.*;
import java.util.*;
import java.io.*;
import java_cup.runtime.*;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java.lang.reflect.Field;

parser code {:
    static SymbolTable tablaSimbolos = new SymbolTable();
    static int verificarTipo = 0;
    static Stack<String> listaIdentificadores = new Stack<String>();
    Symbol cur_token;

    

    public final Class getSymbolContainer() {
        return sym.class;
    }

    public String symbl_name_from_id(int id){
              Field[] fields = getSymbolContainer().getFields();
              for(Field f : fields){
                      try {
                            if (f.getInt(null)==id)
                              return f.getName();
                    } catch (IllegalArgumentException e) {
                            //e.printStackTrace();
                    } catch (IllegalAccessException e) {
                            //e.printStackTrace();
                    }
              }
              return "invalid symbol id";
      }; 
      
    public void syntax_error(Symbol cur_token){
        System.err.print("Syntax error at line: " + (cur_token.left + 1) + ", col: " + (cur_token.right + 1) + " found symbol: " + symbl_name_from_id(cur_token.sym));
}

public void unrecovered_syntax_error(Symbol cur_token) {
        //System.err.println("Please check your program's syntax before line: " + (cur_token.left + 1) + ", col: " + (cur_token.right + 1));
    }

    public void report_fatal_error(String message, Object info) {
        // Nothing
    }
    
    public void report_error(String message, Object info) {
        //Nothing
    }



:};

    
/* ------------Declaration of Terminals and Non Terminals Section----------- */
/* Types */
terminal String     INTEGER, CHAR, BOOLEAN, STRING, VAR, ARRAY;

/*Booleans */
terminal            TRUE, FALSE;

/*ciclos */
terminal            FUNCTION, IF, ELSE, WHILE, DO, FOR, TO, REPEAT,UNTIL,THEN, BEGIN, END, OF;

/*functions */
terminal            PROGRAM;

/*Symbols*/
terminal            SEMICOLON, COLON, COMMA, DOT;   

/*IO*/
terminal            READ, WRITE;

/* Arithmetic */
terminal            PLUS,MINUS,TIMES,DIVIDE;

/*Groups*/
terminal            LPAREN, RPAREN, LCOR, RCOR;

/* Boolean Expressions */
terminal            GREATEREQ, LESSEQ, GREATER, LESS, NEQ, EQU;

/* Logic operators */
terminal            NOT, OR, AND;

/*Assignment*/
terminal            ASSIGN;

/*Values*/
terminal    String      ID;
terminal    String      CONSTSTR;
terminal    Integer     NUMBER;
terminal    Character   CONSTCHAR;

 /*Non Terminals section*/
non terminal Program program;
non terminal Block block;
non terminal Variable_dec_part v_d_p;
non terminal Variable_dec var_dec;
non terminal Type type;
non terminal Array_type array_t;
non terminal Index_range index_r;
non terminal Simple_type simple_t;
non terminal Type_ident t_id;
non terminal Procedure_dec_part p_d_p;
non terminal Procedure_dec proc_dec;
non terminal Compound_stament c_stament;
non terminal Stament stament;
non terminal Simple_stament sim_stament;
non terminal Structured_stament struct_stament;
non terminal Assign_stament assign_s;
non terminal Procedure_stament proc_s;
non terminal Procedure_iden proc_id;
non terminal Read_stament read_s;
non terminal Input_variable input_var;
non terminal Write_stament write_s;
non terminal Output_value output_val;
non terminal If_stament if_stament;
non terminal While_stament while_stament;
non terminal Expression exp;
non terminal Simple_expression sim_exp;
non terminal Term term;
non terminal Factor factor;
non terminal Variable var;
non terminal Indexed_variable ind_var;
non terminal Array_variable array_var;
non terminal Entire_variable ent_var;
non terminal Variable_identifier var_ident;
non terminal Staments staments; 
non terminal Writes writes;
non terminal Variable_d v_dec;  
non terminal Procedure_d p_dec;
non terminal Block_p block_p;
non terminal Parameters parameters; 
non terminal For_stament for_stament;
non terminal Repeat_stament repeat_stament;

/* precedence thingy */
precedence left OR;
precedence left AND;
precedence left EQU, NEQ, LESS, LESSEQ, GREATEREQ, GREATER;
precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE;
precedence right NOT;
precedence nonassoc ELSE;


/* ----------------------------Grammar Section-------------------- */

program ::= PROGRAM ID:id SEMICOLON block:block DOT                             {: RESULT = new Program (id,block); :}
            |PROGRAM ID error block DOT                                         {: System.err.println(" ; expected"); :}
            |error ID:id SEMICOLON block:block DOT                              {: System.err.println(" reserved word PROGRAM expected"); :}
            |PROGRAM error                                                      {: System.err.println(" program ID expected"); :}                                                
;

block ::= v_d_p:vdp p_d_p:pdp c_stament:c_s                                     {: RESULT = new Block (vdp,pdp,c_s); :}                        
;

block_p ::= v_d_p:vdp c_stament:c_s                                             {: RESULT = new Block_p(vdp,c_s);                                                                                
                                                                                   SymbolTable.profundidad="main";
                                                                                   SymbolTable.UltimaFuncion="main";:}
;

v_d_p ::= VAR var_dec:vd                                                        {: RESULT = new Variable_dec_part(vd); :}                                                       
          |/*lambda*/                                   
          |error var_dec:vd                                                     {: System.err.println(" reserved word VAR expected"); :}
;

var_dec ::= v_dec:vd SEMICOLON var_dec:var_d                                    {: var_d.add(vd); RESULT = var_d; :}
           |/*lambda*/                                                          {: RESULT = new Variable_dec(); :}
           |v_dec:vd error var_dec:var_d                                        {: System.err.println(" ; expected"); :}
;

v_dec ::= ID:id COMMA v_dec:vd                                                  {: vd.add(id); RESULT = vd; 
                                                                                SymbolTable.crear(id,null,SymbolTable.UltimaFuncion);
                                                                                SymbolTable.agregarTipo(id, SymbolTable.UltimaFuncion);
                                                                             
                                                                                //System.out.println("ULTIMA FUNCION EN V_DEC " + SymbolTable.UltimaFuncion);
                                                                                :}
          |ID:id error v_dec:vd                                                 {: System.err.println(" , or : expected"); :}
          |ID:id COLON type:tipo                                                {: RESULT = new Variable_d(id,tipo); 
                                                                                SymbolTable.crear(id, tipo.toString(),SymbolTable.UltimaFuncion);
                                                                               
                                                                                //System.out.println("ULTIMA FUNCION EN V_DEC " + SymbolTable.UltimaFuncion);
                                                                                
                                                                                //System.out.println();:}            
;


p_d_p ::=  proc_dec:pd  p_d_p:pdp                                               {: pdp.add(pd); RESULT= pdp; :}
           |/*Lambda*/                                                          {: RESULT = new Procedure_dec_part(); :}
;

proc_dec ::= p_dec:pd block_p:bl SEMICOLON                                      {: RESULT = new Procedure_dec(pd,bl); :}
            |p_dec:pd block_p:bl error                                          {: System.err.println(" ; expected"); :}
;

p_dec ::= FUNCTION ID:id COLON type:tipo                                       {: RESULT = new Procedure_d(id,tipo); :}
          |FUNCTION ID error type                                              {: System.err.println(" : expected"); :}
          |FUNCTION ID:id LPAREN parameters:p RPAREN COLON type:tipo SEMICOLON {: RESULT = new Procedure_d (id,tipo,p);
                                                                                for(int i=0;i<p.getParametros().size();i++){
                                                                                    SymbolTable.crear(p.getParametros().get(i).getId(), p.getParametros().get(i).getTipo().toString(), id + "_Param");
                                                                                    //System.out.println("parametros " + p.getParametros().get(i).getId());
                                                                                }
                                                                                SymbolTable.crear(id, tipo.toString(), "function");
                                                                                SymbolTable.profundidad=id;
                                                                                SymbolTable.UltimaFuncion=id;:}                                                                    
          |FUNCTION ID:id error parameters:p RPAREN COLON type:tipo SEMICOLON  {: System.err.println(" LPAREN expected"); :}
          |FUNCTION ID:id LPAREN parameters:p error COLON type:tipo SEMICOLON  {: System.err.println(" RPAREN expected"); :}
          |FUNCTION ID:id LPAREN parameters:p RPAREN error type:tipo SEMICOLON {: System.err.println(" : expected"); :}
          |FUNCTION ID:id LPAREN parameters:p RPAREN COLON type:tipo error     {: System.err.println(" ; expected"); :}

;

parameters ::=  ID:id COLON type:tipo COMMA parameters:pms                      {: pms.add(new Parameter(id,tipo)); RESULT = pms; :}
                |ID:id error type:tipo COMMA parameters:pms                     {: System.err.println(" , expected"); :}
                |ID:id COLON type:tipo                                          {: RESULT = new Parameters(id,tipo);:}
;

type ::= simple_t:st                                                            {: RESULT = new Type(st);:}
         |array_t:at                                                            {: RESULT = new Type(at); :}
;

array_t ::= ARRAY LCOR index_r:ind_r RCOR OF simple_t:sim_t                     {: RESULT = new Array_type(ind_r,sim_t); :}
            |ARRAY error index_r:ind_r RCOR OF simple_t:sim_t                   {: System.err.println(" [ expected"); :}
            |ARRAY LCOR index_r:ind_r error OF simple_t:sim_t                   {: System.err.println(" ] expected"); :}
            |ARRAY LCOR index_r:ind_r RCOR error simple_t:sim_t                 {: System.err.println(" reserved word FOR expected."); :}
;

index_r ::= NUMBER:n1 DOT DOT NUMBER:n2                                         {:RESULT = new Index_range(n1,n2); :}
            |NUMBER:n1 error DOT NUMBER:n2                                      {: System.err.println(" . expected"); :} 
            |error DOT DOT NUMBER:n2                                            {: System.err.println(" number expected"); :} 
            |NUMBER:n1 DOT DOT error                                            {: System.err.println(" number expected"); :} 
;

simple_t ::= t_id:tid                                                           {: RESULT = new Simple_type (tid);:}
;

t_id ::= INTEGER:nombre                                                         {: RESULT = new Type_ident("integer");
                                                                                 //System.out.println(RESULT.getIdent());:}
         |CHAR:nombre                                                           {: RESULT = new Type_ident("char");
                                                                                 //System.out.println(RESULT.getIdent());:}
         |BOOLEAN:nombre                                                        {: RESULT = new Type_ident("boolean");
                                                                                 //System.out.println(RESULT.getIdent());:}
         |STRING:nombre                                                         {: RESULT = new Type_ident("string");
                                                                                 //System.out.println(RESULT.getIdent());:}
         |error                                                                 {: System.err.println("Type Expected"); :}
;

c_stament ::= BEGIN staments:sts END                                            {: RESULT = new Compound_stament(sts); :}
              |BEGIN END                                            
;

staments ::= stament:st SEMICOLON staments:sts                                  {:sts.add(st); RESULT = sts; :}
             |stament:st error staments:sts                                     {: System.err.println(" ; expected"); :} 
             |stament:st SEMICOLON                                              {:RESULT = new Staments(); RESULT.add(st); :}
             |stament:st error                                                  {: System.err.println(" ; expected"); :} 
;

stament ::= sim_stament:sim_st                                                  {: RESULT = new Stament(sim_st); :}
            |struct_stament:st_st                                               {: RESULT = new Stament(st_st); :}
;

sim_stament ::= assign_s:as_s                                                   {: RESULT = new Simple_stament(as_s); :}
                |proc_s:p_s                                                     {: RESULT = new Simple_stament(p_s); :}
                |read_s:r_s                                                     {: RESULT = new Simple_stament(r_s); :}
                |write_s:w_s                                                    {: RESULT = new Simple_stament(w_s); :}
;

assign_s ::= var:v ASSIGN:as exp:ex                                             {:RESULT = new Assign_stament(v,ex); 
                                                                                Simbolo tmp = null;
                                                                                Simbolo tmp2 = null;
                                                                                tmp = SymbolTable.buscar(v.toString());
                                                                                tmp2 = SymbolTable.buscar(ex.toString());
                                                                                if(tmp == null){
                                                                                    System.err.println("Error en la linea: "+asleft+" variable " +v.toString()+ " no existe");
                                                                                } 
                                                                                else if(tmp!=null){
                                                                                    String ambito1 = SymbolTable.verificarAmbito(tmp.nombre);
                                                                                    if(tmp.valor == null){                                                                                       
                                                                                        String tipoVariable = SymbolTable.verificarTipo(tmp.nombre);
                                                                                        if(tipoVariable.equals("integer")&&tmp2==null){
                                                                                            if(ex.getS_exp1()!=null){
                                                                                                if (ex.getS_exp1().getTerm().getFact().getType()==4)
                                                                                                    if ((ambito1.equals(SymbolTable.profundidad)) ||
                                                                                                       (ambito1.equals("main") && !SymbolTable.profundidad.equals("main")) || (ambito1.contains(SymbolTable.profundidad))){
                                                                                                            SymbolTable.insertar(v.toString(),ex);
                                                                                                    }else{
                                                                                                        System.err.println("Error en la linea: "+asleft+" ,variable no ha sido declarada");
                                                                                                    }
                                                                                                else
                                                                                                        System.err.println("Error en la linea: "+asleft+" tipo de asignacion incompatible, se esperaba un integer");
                                                                                            }
                                                                                        }
                                                                                        else if (tipoVariable.equals("string")&&tmp2==null){
                                                                                            if(ex.getS_exp1()!=null){
                                                                                                if(ex.getS_exp1().getTerm().getFact().getType()==2)
                                                                                                    if ((ambito1.equals(SymbolTable.profundidad)) ||
                                                                                                       (ambito1.equals("main") && !SymbolTable.profundidad.equals("main")) || (ambito1.contains(SymbolTable.profundidad))){
                                                                                                            SymbolTable.insertar(v.toString(),ex);
                                                                                                    }else{
                                                                                                        System.err.println("Error en la linea: "+asleft+" ,variable no ha sido declarada");
                                                                                                    }
                                                                                                else
                                                                                                    System.err.println("Error en la linea: "+asleft+"Tipo de asignacion incompatible, se esperaba una String.");
                                                                                            }
                                                                                        }
                                                                                        else if (tipoVariable.equals("char")&&tmp2==null){
                                                                                            if(ex.getS_exp1()!= null){
                                                                                                if(ex.getS_exp1().getTerm().getFact().getType()==3)
                                                                                                    if ((ambito1.equals(SymbolTable.profundidad)) ||
                                                                                                       (ambito1.equals("main") && !SymbolTable.profundidad.equals("main")) || (ambito1.contains(SymbolTable.profundidad))){
                                                                                                            SymbolTable.insertar(v.toString(),ex);
                                                                                                    }else{
                                                                                                        System.err.println("Error en la linea: "+asleft+" ,variable no ha sido declarada");
                                                                                                    }
                                                                                                else
                                                                                                    System.err.println("Error en la linea: "+asleft+" tipo de asignacion incompatible, se esperaba un char.");
                                                                                            }
                                                                                        }
                                                                                        else if(tmp2!=null){
                                                                                            String ambito2 = SymbolTable.verificarAmbito(tmp2.nombre);
                                                                                            if(ex.getS_exp1()!=null){
                                                                                                if(ex.getS_exp1().getTerm().getFact().getType()==1){
                                                                                                    if(tipoVariable.equals(SymbolTable.verificarTipo(ex.getS_exp1().getTerm().getFact().getVar().toString())))
                                                                                                        if(((ambito1.equals("main") && ambito2.equals("main")) && ((SymbolTable.profundidad.equals("main")) ||(!SymbolTable.profundidad.equals("main")))) 
                                                                                                        || ((ambito1.equals("main") && !ambito2.equals("main")) && ((ambito2.equals(SymbolTable.profundidad)) || ambito2.contains(SymbolTable.profundidad)))
                                                                                                        || ((!ambito1.equals("main")) && ((ambito1.equals(SymbolTable.profundidad)) || ambito1.contains(SymbolTable.profundidad)) 
                                                                                                        && ((ambito2.equals("main")) || (ambito2.contains(ambito1)) || (ambito2.equals(ambito1))))){
                                                                                                            SymbolTable.insertar(v.toString(), SymbolTable.verificarValor(ex.getS_exp1().getTerm().getFact().getVar().toString()));
                                                                                                        }else{
                                                                                                           System.err.println("Error en la linea: "+asleft+" ,variable no ha sido declarada");   
                                                                                                        }
                                                                                                    else
                                                                                                        System.err.println("Error en la linea: "+asleft+" tipo de asignacion incompatible");
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }else if(tmp.valor != null){
                                                                                        String tipoVariable = SymbolTable.verificarTipo(tmp.nombre);
                                                                                        if(tipoVariable.equals("integer")&&tmp2==null){
                                                                                            if(ex.getS_exp1().getTerm().getFact().getType()== 4)
                                                                                                if ((ambito1.equals(SymbolTable.profundidad)) ||
                                                                                                       (ambito1.equals("main") && !SymbolTable.profundidad.equals("main")) || (ambito1.contains(SymbolTable.profundidad))){
                                                                                                            SymbolTable.insertar(v.toString(),ex);
                                                                                                    }else{
                                                                                                        System.err.println("Error en la linea: "+asleft+" ,variable no ha sido declarada");
                                                                                                    }
                                                                                            else
                                                                                                System.err.println("Error en la linea: "+asleft+" tipo de asignacion incompatible, se esperaba un integer");
                                                                                        }
                                                                                        else if (tipoVariable.equals("string")&&tmp2==null){
                                                                                            if(ex.getS_exp1().getTerm().getFact().getType()==2)
                                                                                                if ((ambito1.equals(SymbolTable.profundidad)) ||
                                                                                                       (ambito1.equals("main") && !SymbolTable.profundidad.equals("main")) || (ambito1.contains(SymbolTable.profundidad))){
                                                                                                            SymbolTable.insertar(v.toString(),ex);
                                                                                                    }else{
                                                                                                        System.err.println("Error en la linea: "+asleft+" ,variable no ha sido declarada");
                                                                                                    }
                                                                                            else
                                                                                                System.err.println("Error en la linea: "+asleft+" tipo de asignacion incompatible, se esperaba una String");
                                                                                        }
                                                                                        else if (tipoVariable.equals("char")&&tmp2==null){
                                                                                            if(ex.getS_exp1().getTerm().getFact().getType()==3)
                                                                                                if ((ambito1.equals(SymbolTable.profundidad)) ||
                                                                                                       (ambito1.equals("main") && !SymbolTable.profundidad.equals("main")) || (ambito1.contains(SymbolTable.profundidad))){
                                                                                                            SymbolTable.insertar(v.toString(),ex);
                                                                                                    }else{
                                                                                                        System.err.println("Error en la linea: "+asleft+" ,variable no ha sido declarada");
                                                                                                    }
                                                                                            else
                                                                                                System.err.println("Error en la linea: "+asleft+" tipo de asignacion incompatible, se esperaba un char");
                                                                                        }
                                                                                        else if(tmp2!=null){
                                                                                            String ambito2 = SymbolTable.verificarAmbito(tmp2.nombre);
                                                                                            if(ex.getS_exp1().getTerm().getFact().getType()==1){
                                                                                                if(tipoVariable.equals(SymbolTable.verificarTipo(ex.getS_exp1().getTerm().getFact().getVar().toString())))
                                                                                                    if(((ambito1.equals("main") && ambito2.equals("main")) && ((SymbolTable.profundidad.equals("main")) ||(!SymbolTable.profundidad.equals("main")))) 
                                                                                                        || ((ambito1.equals("main") && !ambito2.equals("main")) && ((ambito2.equals(SymbolTable.profundidad)) || ambito2.contains(SymbolTable.profundidad)))
                                                                                                        || ((!ambito1.equals("main")) && ((ambito1.equals(SymbolTable.profundidad)) || ambito1.contains(SymbolTable.profundidad)) 
                                                                                                        && ((ambito2.equals("main")) || (ambito2.contains(ambito1)) || (ambito2.equals(ambito1))))){
                                                                                                            SymbolTable.insertar(v.toString(), SymbolTable.verificarValor(ex.getS_exp1().getTerm().getFact().getVar().toString()));
                                                                                                        }else{
                                                                                                           System.err.println("Error en la linea: "+asleft+" ,variable no ha sido declarada");   
                                                                                                        }
                                                                                                else
                                                                                                    System.err.println("Error en la linea: "+asleft+" tipo de asignacion incompatible");
                                                                                                
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                :}    
;

proc_s ::= proc_id:p_id                                                         {: RESULT = new Procedure_stament(p_id); :}
;

proc_id ::= ID:id                                                               {: RESULT = new Procedure_iden(id); :}
;

read_s ::= READ LPAREN input_var:i_v RPAREN                                     {: RESULT = new Read_stament(i_v); :}
          |READ error input_var:i_v RPAREN                                      {: System.err.println(" ( expected"); :}
          |READ LPAREN input_var:i_v error                                      {: System.err.println(" ) expected"); :}
;

input_var ::= var:v                                                             {: RESULT = new Input_variable(v); :}
;

write_s ::= WRITE LPAREN writes:wr RPAREN                                       {: RESULT = new Write_stament(wr); :}
            |WRITE error writes:wr RPAREN                                       {: System.err.println(" ( expected"); :}
            |WRITE LPAREN writes:wr error                                       {: System.err.println(" ) expected"); :}
;

writes ::= output_val:ov COMMA writes:wr                                        {: wr.add(ov); RESULT = wr; :}
           |output_val:ov                                                       {: RESULT = new Writes(); RESULT.add(ov); :}
;

output_val ::= exp:ex                                                           {: RESULT = new Output_value(ex); :}
;

struct_stament ::= c_stament: c_st                                              {: RESULT = new Structured_stament(c_st); :}
             |if_stament: if_st                                                 {: RESULT = new Structured_stament(if_st); :}
             |while_stament: w_st                                               {: RESULT = new Structured_stament(w_st); :}
             |for_stament:f_st                                                  {: RESULT = new Structured_stament(f_st); :}
             |repeat_stament:r_st                                               {: RESULT = new Structured_stament(r_st); :}
;

if_stament ::= IF exp:ex THEN stament:st                                        {: RESULT = new If_stament(ex,st); :}
         |IF exp:ex error stament:st                                            {: System.err.println(" reserved word THEN expected"); :}
         |IF exp:ex THEN stament:st1 ELSE stament:st2                           {: RESULT = new If_stament(ex,st1,st2); :}
;

while_stament ::= WHILE exp:ex DO stament:st                                    {: RESULT = new While_stament(ex,st); :}
                  |WHILE exp:ex error stament:st                                {: System.err.println(" reserved word DO expected"); :}
;

for_stament ::= FOR ID:id ASSIGN NUMBER:m TO NUMBER:n DO c_stament:sts          {: RESULT = new For_stament(new Parameter(id,m),n,sts); :}
                |FOR ID:id error NUMBER:m TO NUMBER:n DO c_stament:sts          {: System.err.println(" =: expected"); :}
                |FOR ID:id ASSIGN NUMBER:m error NUMBER:n DO c_stament:sts      {: System.err.println(" reserved word TO expected"); :}
                |FOR ID:id ASSIGN NUMBER:m TO NUMBER:n error c_stament:sts      {: System.err.println(" reserved word DO expected"); :}
;

repeat_stament ::= REPEAT staments:sts UNTIL exp:ex                             {: RESULT = new Repeat_stament(sts,ex); :}
                  |REPEAT staments:sts error exp:ex                             {: System.err.println(" reserved word UNTIL expected"); :}  
;
exp ::= sim_exp:sime                                                            {: RESULT =  new Expression(sime); :} 
        |sim_exp:se1 EQU sim_exp:se2                                            {: RESULT = new Equal(se1,se2); :}
	|sim_exp:se1 NEQ sim_exp:se2                                            {: RESULT = new Nequal(se1,se2); :}
	|sim_exp:se1 LESS sim_exp:se2                                           {: RESULT = new Less(se1,se2); :}
	|sim_exp:se1 LESSEQ sim_exp:se2                                         {: RESULT = new LessE(se1,se2); :}
	|sim_exp:se1 GREATEREQ sim_exp:se2                                      {: RESULT = new GreaterE(se1,se2); :}
	|sim_exp:se1 GREATER sim_exp:se2                                        {: RESULT = new Greater(se1,se2); :}
        |error 
        
;

sim_exp ::= term:term                                                           {: RESULT = new Simple_expression(term); :}
            |sim_exp:se1 PLUS:pl term:term                                         {:  //System.out.println("Entro al plus");
                                                                                    if(se1.getTerm().getFact().getType()==4){
                                                                                        //System.out.println("entro al type == 4 numero 1");
                                                                                        if(term.getFact().getType()==4){
                                                                                            //System.out.println("Entro al type == 4 numero 2");
                                                                                            RESULT = new Simple_expression(new Term(new Factor(Integer.parseInt(se1.toString())+Integer.parseInt(term.toString()))));
                                                                                        }
                                                                                        else if(term.getFact().getType()==1){
                                                                                            Simbolo tmp2 = null;
                                                                                            tmp2 = SymbolTable.buscar(term.toString());
                                                                                            if(tmp2==null){
                                                                                                System.err.println("Error en la linea: "+plleft+" la variable "+term.toString()+" no existe");
                                                                                            }
                                                                                            else if(tmp2!=null&&tmp2.getTipo().equals("integer")){
                                                                                                if(tmp2.valor == null)
                                                                                                    System.err.println("Error en la linea: "+plleft+"no se le ha asignado un valor a esta variable");
                                                                                                else
                                                                                                    RESULT = new Simple_expression(new Term(new Factor(Integer.parseInt(se1.toString())+Integer.parseInt(tmp2.valor.toString()))));   
                                                                                            }
                                                                                            else{
                                                                                                System.err.println("Error en la linea: "+plleft+" no se pueden sumar estos valores, se esperan dos chars");
                                                                                            }
                                                                                        }
                                                                                        else{
                                                                                            System.err.println("Error en la linea: "+plleft+" no se pueden sumar estos valores, se esperan dos enteros");
                                                                                        }
                                                                                    }
                                                                                    else if(se1.getTerm().getFact().getType()==2){
                                                                                        if(term.getFact().getType()==2){
                                                                                            RESULT = new Simple_expression(new Term(new Factor(se1.toString()+term.toString())));
                                                                                        }
                                                                                        else if(term.getFact().getType()==1){
                                                                                            Simbolo tmp2 = null;
                                                                                            tmp2 = SymbolTable.buscar(term.toString());
                                                                                            if(tmp2==null){
                                                                                                System.err.println("Error en la linea: "+plleft+" la variable "+term.toString()+" no existe");
                                                                                            }
                                                                                            else if(tmp2!=null&&tmp2.getTipo().equals("string")){
                                                                                                if(tmp2.valor == null)
                                                                                                    System.err.println("Error en la linea: "+plleft+"no se le ha asignado un valor a esta variable");
                                                                                                else
                                                                                                    RESULT = new Simple_expression(new Term(new Factor(se1.toString()+tmp2.valor.toString())));   
                                                                                            }
                                                                                            else{
                                                                                                System.err.println("Error en la linea: "+plleft+" no se pueden sumar estos valores, se esperan dos cadenas");
                                                                                            }
                                                                                        }
                                                                                        else{
                                                                                            System.err.println("Error en la linea: "+plleft+" no se pueden sumar estos valores, se esperan dos cadenas");
                                                                                        }                                                             
                                                                                    }
                                                                                    else if(se1.getTerm().getFact().getType()==3){
                                                                                        if(term.getFact().getType()==3){
                                                                                            RESULT = new Simple_expression(new Term(new Factor(se1.toString()+term.toString())));
                                                                                        }
                                                                                        else if(term.getFact().getType()==1){
                                                                                            Simbolo tmp2 = null;
                                                                                            tmp2 = SymbolTable.buscar(term.toString());
                                                                                            if(tmp2==null){
                                                                                                System.err.println("Error en la linea: "+plleft+" la variable "+term.toString()+" no existe");
                                                                                            }
                                                                                            else if(tmp2!=null&&tmp2.getTipo().equals("char")){
                                                                                                if(tmp2.valor == null)
                                                                                                    System.err.println("Error en la linea: "+plleft+"no se le ha asignado un valor a esta variable");
                                                                                                else
                                                                                                    RESULT = new Simple_expression(new Term(new Factor(se1.toString()+tmp2.valor.toString())));   
                                                                                            }
                                                                                            else{
                                                                                                System.err.println("Error en la linea: "+plleft+" no se pueden sumar estos valores, se esperan dos chars");
                                                                                            }
                                                                                        }
                                                                                        else{
                                                                                            System.err.println("Error en la linea: "+plleft+" no se pueden sumar estos valores, se esperan dos chars");
                                                                                        }
                                                                                    }
                                                                                    else if(se1.getTerm().getFact().getType()==1){
                                                                                        Simbolo tmp = null;
                                                                                        tmp = SymbolTable.buscar(se1.toString());
                                                                                        if(tmp == null){
                                                                                            System.err.println("Error en la linea: "+plleft+" variable "+se1.toString()+" no existe");
                                                                                        }
                                                                                        else if(tmp!=null){
                                                                                            if(tmp.valor == null)
                                                                                                    System.err.println("Error en la linea: "+plleft+"no se le ha asignado un valor a esta variable");
                                                                                            else
                                                                                                if(tmp.getTipo().equals("integer")){
                                                                                                    if(term.getFact().getType()==4){
                                                                                                        RESULT = new Simple_expression(new Term(new Factor(Integer.parseInt(tmp.valor.toString())+Integer.parseInt(term.toString()))));
                                                                                                    }
                                                                                                    else if(term.getFact().getType()==1){
                                                                                                        Simbolo tmp2 = null;
                                                                                                        tmp2 = SymbolTable.buscar(term.toString());
                                                                                                        if(tmp2==null){
                                                                                                        System.err.println("Error en la linea: "+plleft+" la variable "+term.toString()+" no existe");
                                                                                                    }
                                                                                                    else if(tmp2!=null&&tmp2.getTipo().equals("integer")){
                                                                                                        if(tmp2.valor == null)
                                                                                                            System.err.println("Error en la linea: "+plleft+"no se le ha asignado un valor a esta variable");
                                                                                                        else
                                                                                                            RESULT = new Simple_expression(new Term(new Factor(Integer.parseInt(tmp.valor.toString())+Integer.parseInt(tmp2.valor.toString()))));   
                                                                                                    }
                                                                                                    else{
                                                                                                       System.err.println("Error en la linea: "+plleft+" no se pueden sumar estos valores, se esperan dos chars");
                                                                                                    }
                                                                                                }
                                                                                                else{
                                                                                                    System.err.println("Error en la linea: "+plleft+" no se pueden sumar estos valores, se esperan dos enteros");
                                                                                                } 
                                                                                            }
                                                                                            else if(tmp.getTipo().equals("string")){
                                                                                                if(term.getFact().getType()==2){
                                                                                                    RESULT = new Simple_expression(new Term(new Factor(tmp.valor.toString()+term.toString())));
                                                                                                }
                                                                                                else if(term.getFact().getType()==1){
                                                                                                    Simbolo tmp2 = null;
                                                                                                    tmp2 = SymbolTable.buscar(term.toString());
                                                                                                    if(tmp2==null){
                                                                                                        System.err.println("Error en la linea: "+plleft+" la variable "+term.toString()+" no existe");
                                                                                                    }
                                                                                                    else if(tmp2!=null&&tmp2.getTipo().equals("string")){
                                                                                                        if(tmp2.valor == null)
                                                                                                            System.err.println("Error en la linea: "+plleft+"no se le ha asignado un valor a esta variable");
                                                                                                        else
                                                                                                            RESULT = new Simple_expression(new Term(new Factor(tmp.valor.toString()+tmp2.valor.toString())));   
                                                                                                    }
                                                                                                    else{
                                                                                                       System.err.println("Error en la linea: "+plleft+" no se pueden sumar estos valores, se esperan dos chars");
                                                                                                    }
                                                                                                }
                                                                                                else{
                                                                                                    System.err.println("Error en la linea: "+plleft+" no se pueden sumar estos valores, se esperan dos cadenas");
                                                                                                }
                                                                                            }
                                                                                            else if(tmp.getTipo().equals("char")){
                                                                                                if(term.getFact().getType()==3){
                                                                                                    RESULT = new Simple_expression(new Term(new Factor(tmp.valor.toString()+term.toString())));
                                                                                                }
                                                                                                else if(term.getFact().getType()==1){
                                                                                                    Simbolo tmp2 = null;
                                                                                                    tmp2 = SymbolTable.buscar(term.toString());
                                                                                                    if(tmp2==null){
                                                                                                        System.err.println("Error en la linea: "+plleft+" la variable "+term.toString()+" no existe");
                                                                                                    }
                                                                                                    else if(tmp2!=null&&tmp2.getTipo().equals("char")){
                                                                                                        if(tmp2.valor == null)
                                                                                                            System.err.println("Error en la linea: "+plleft+"no se le ha asignado un valor a esta variable");
                                                                                                        else
                                                                                                            RESULT = new Simple_expression(new Term(new Factor(tmp.valor.toString()+tmp2.valor.toString())));   
                                                                                                    }
                                                                                                    else{
                                                                                                       System.err.println("Error en la linea: "+plleft+" no se pueden sumar estos valores, se esperan dos chars");
                                                                                                    }
                                                                                                }
                                                                                                else{
                                                                                                    System.err.println("Error en la linea: "+plleft+" no se pueden sumar estos valores, se esperan dos chars");
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                :}
            |sim_exp:se1 MINUS:min term:term                                        {://System.out.println("Entro al minus");
                                                                                    if(se1.getTerm().getFact().getType()==4){
                                                                                        //System.out.println("entro al type == 4 numero 1");
                                                                                        if(term.getFact().getType()==4){
                                                                                            //System.out.println("Entro al type == 4 numero 2");
                                                                                            RESULT = new Simple_expression(new Term(new Factor(Integer.parseInt(se1.toString())-Integer.parseInt(term.toString()))));
                                                                                        }
                                                                                        else if(term.getFact().getType()==1){
                                                                                            Simbolo tmp2 = null;
                                                                                            tmp2 = SymbolTable.buscar(term.toString());
                                                                                            if(tmp2==null){
                                                                                                System.err.println("Error en la linea: "+minleft+" la variable "+term.toString()+" no existe");
                                                                                            }
                                                                                            else if(tmp2!=null&&tmp2.getTipo().equals("integer")){
                                                                                                if(tmp2.valor == null)
                                                                                                    System.err.println("Error en la linea: "+minleft+"no se le ha asignado un valor a esta variable");
                                                                                                else
                                                                                                    RESULT = new Simple_expression(new Term(new Factor(Integer.parseInt(se1.toString())-Integer.parseInt(tmp2.valor.toString()))));   
                                                                                            }
                                                                                            else{
                                                                                                System.err.println("Error en la linea: "+minleft+" no se pueden sumar estos valores, se esperan dos chars");
                                                                                            }
                                                                                        }
                                                                                        else{
                                                                                            System.err.println("Error en la linea: "+minleft+" no se pueden restar estos valores, se esperan dos enteros");
                                                                                        }
                                                                                    }
                                                                                        else if(se1.getTerm().getFact().getType()==1){
                                                                                        Simbolo tmp = null;
                                                                                        tmp = SymbolTable.buscar(se1.toString());
                                                                                        if(tmp == null){
                                                                                            System.err.println("Error en la linea: "+minleft+" variable "+se1.toString()+" no existe");
                                                                                        }
                                                                                        else if(tmp!=null){
                                                                                            if(tmp.valor == null)
                                                                                                System.err.println("Error en la linea: "+minleft+"no se le ha asignado un valor a esta variable");
                                                                                            else
                                                                                                if(tmp.getTipo().equals("integer")){
                                                                                                    if(term.getFact().getType()==4){
                                                                                                        RESULT = new Simple_expression(new Term(new Factor(Integer.parseInt(tmp.valor.toString())-Integer.parseInt(term.toString()))));
                                                                                                    }
                                                                                                    else if(term.getFact().getType()==1){
                                                                                                        Simbolo tmp2 = null;
                                                                                                        tmp2 = SymbolTable.buscar(term.toString());
                                                                                                        if(tmp2==null){
                                                                                                            System.err.println("Error en la linea: "+minleft+" la variable "+term.toString()+" no existe");
                                                                                                        }
                                                                                                        else if(tmp2!=null&&tmp2.getTipo().equals("integer")){
                                                                                                            if(tmp2.valor == null)
                                                                                                                System.err.println("Error en la linea: "+minleft+"no se le ha asignado un valor a esta variable");
                                                                                                            else
                                                                                                                RESULT = new Simple_expression(new Term(new Factor(Integer.parseInt(tmp.valor.toString())-Integer.parseInt(tmp2.valor.toString()))));   
                                                                                                        }
                                                                                                        else{
                                                                                                            System.err.println("Error en la linea: "+minleft+" no se pueden sumar estos valores, se esperan dos enteros");
                                                                                                        }
                                                                                                    }
                                                                                                    else{
                                                                                                        System.err.println("Error en la linea: "+minleft+" no se pueden restar estos valores, se esperan dos enteros");
                                                                                                    } 
                                                                                                }
                                                                                            }
                                                                                        }:}
            |PLUS term:term                                                     {:RESULT = new Simple_expression(term);:}
            |MINUS:min term:term                                                    {:if(term.getFact().getType()==4){
                                                                                    RESULT = new Simple_expression(new Term(new Factor(Integer.parseInt(term.toString())*-1)));
                                                                                }
                                                                                else if(term.getFact().getType()==1){
                                                                                    Simbolo tmp = null;
                                                                                    tmp = SymbolTable.buscar(term.toString());
                                                                                    if(tmp==null){
                                                                                        System.err.println("Error en la linea: "+minleft+" la variable" + term.toString()+" no existe");
                                                                                    }
                                                                                    else if(tmp != null&&tmp.getTipo().equals("integer")){
                                                                                        if(tmp.valor == null)
                                                                                            System.err.println("Error en la linea: "+minleft+"no se le ha asignado un valor a esta variable");
                                                                                        else
                                                                                            RESULT = new Simple_expression(new Term(new Factor(Integer.parseInt(tmp.valor.toString())*-1)));
                                                                                    }
                                                                                    else
                                                                                        System.err.println("Error en la linea: "+minleft+" tipo incompatible, se esperaba entero");
                                                                                }:}
;

term ::= factor:fact                                                            {: RESULT = new Term(fact); :}
         |term:term TIMES:tim factor:fact                                       {://System.out.println("Entro al times");
                                                                                    if(term.getFact().getType()==4){
                                                                                        //System.out.println("entro al type == 4 numero 1");
                                                                                        if(fact.getType()==4){
                                                                                            //System.out.println("Entro al type == 4 numero 2");
                                                                                            RESULT = new Term(new Factor(Integer.parseInt(term.toString())*Integer.parseInt(fact.toString())));
                                                                                        }
                                                                                        else if(fact.getType()==1){
                                                                                            Simbolo tmp2 = null;
                                                                                            tmp2 = SymbolTable.buscar(term.toString());
                                                                                            if(tmp2==null){
                                                                                                System.err.println("Error en la linea: "+timleft+" la variable "+fact.toString()+" no existe");
                                                                                            }
                                                                                            else if(tmp2!=null&&tmp2.getTipo().equals("integer")){
                                                                                                if(tmp2.valor == null)
                                                                                                    System.err.println("Error en la linea: "+timleft+"no se le ha asignado un valor a esta variable");
                                                                                                else
                                                                                                    RESULT = new Term(new Factor(Integer.parseInt(term.toString())*Integer.parseInt(tmp2.valor.toString())));   
                                                                                            }
                                                                                            else{
                                                                                               System.err.println("Error en la linea: "+timleft+" no se pueden sumar estos valores, se esperan dos enteros");
                                                                                            }
                                                                                        }
                                                                                        else{
                                                                                            System.err.println("Error en la linea: "+timleft+" no se pueden restar estos valores, se esperan dos enteros");
                                                                                        }
                                                                                    }
                                                                                    else if(term.getFact().getType()==1){
                                                                                        Simbolo tmp = null;
                                                                                        tmp = SymbolTable.buscar(term.toString());
                                                                                        if(tmp == null){
                                                                                            System.err.println("Error en la linea: "+timleft+" variable "+term.toString()+" no existe");
                                                                                        }
                                                                                        else if(tmp!=null){
                                                                                            if(tmp.valor == null)
                                                                                                System.err.println("Error en la linea: "+timleft+"no se le ha asignado un valor a esta variable");
                                                                                            else
                                                                                                if(tmp.getTipo().equals("integer")){
                                                                                                    if(fact.getType()==4){
                                                                                                        RESULT = new Term(new Factor(Integer.parseInt(tmp.valor.toString())*Integer.parseInt(fact.toString())));
                                                                                                    }
                                                                                                    else if(fact.getType()==1){
                                                                                                        Simbolo tmp2 = null;
                                                                                                        tmp2 = SymbolTable.buscar(fact.toString());
                                                                                                        if(tmp2==null){
                                                                                                            System.err.println("Error en la linea: "+timleft+" la variable "+fact.toString()+" no existe");
                                                                                                        }
                                                                                                        else if(tmp2!=null&&tmp2.getTipo().equals("integer")){
                                                                                                            if(tmp2.valor == null)
                                                                                                                System.err.println("Error en la linea: "+timleft+"no se le ha asignado un valor a esta variable");
                                                                                                            else
                                                                                                                RESULT = new Term(new Factor(Integer.parseInt(tmp.valor.toString())*Integer.parseInt(tmp2.valor.toString())));   
                                                                                                        }
                                                                                                        else{
                                                                                                            System.err.println("Error en la linea: "+timleft+" no se pueden sumar estos valores, se esperan dos enteros");
                                                                                                        }
                                                                                                    }
                                                                                                    else{
                                                                                                        System.err.println("Error en la linea: "+timleft+" no se pueden multiplicar estos valores, se esperan dos enteros");
                                                                                                    } 
                                                                                                }
                                                                                            }
                                                                                        }:}
         |term:term DIVIDE:div factor:fact                                      {://System.out.println("Entro al divide");
                                                                                    if(term.getFact().getType()==4){
                                                                                        //System.out.println("entro al type == 4 numero 1");
                                                                                        if(fact.getType()==4){
                                                                                            //System.out.println("Entro al type == 4 numero 2");
                                                                                            RESULT = new Term(new Factor(Integer.parseInt(term.toString())/Integer.parseInt(fact.toString())));
                                                                                        }
                                                                                        else if(fact.getType()==1){
                                                                                            Simbolo tmp2 = null;
                                                                                            tmp2 = SymbolTable.buscar(fact.toString());
                                                                                            if(tmp2==null){
                                                                                                System.err.println("Error en la linea: "+divleft+" la variable "+fact.toString()+" no existe");
                                                                                            }
                                                                                            else if(tmp2!=null&&tmp2.getTipo().equals("integer")){
                                                                                                if(tmp2.valor == null)
                                                                                                    System.err.println("Error en la linea: "+divleft+"no se le ha asignado un valor a esta variable");
                                                                                                else
                                                                                                    RESULT = new Term(new Factor(Integer.parseInt(term.toString())/Integer.parseInt(tmp2.valor.toString())));   
                                                                                            }
                                                                                            else{
                                                                                                System.err.println("Error en la linea: "+divleft+" no se pueden sumar estos valores, se esperan dos enteros");
                                                                                            }
                                                                                        }
                                                                                        else{
                                                                                            System.err.println("Error en la linea: "+divleft+" no se pueden dividir estos valores, se esperan dos enteros");
                                                                                        }
                                                                                    }
                                                                                    else if(term.getFact().getType()==1){
                                                                                        Simbolo tmp = null;
                                                                                        tmp = SymbolTable.buscar(term.toString());
                                                                                        if(tmp == null){
                                                                                            System.err.println("Error en la linea: "+divleft+" variable "+term.toString()+" no existe");
                                                                                        }
                                                                                        else if(tmp!=null){
                                                                                            if(tmp.valor == null)
                                                                                                System.err.println("Error en la linea: "+divleft+"no se le ha asignado un valor a esta variable");
                                                                                            else
                                                                                                if(tmp.getTipo().equals("integer")){
                                                                                                    if(fact.getType()==4){
                                                                                                        RESULT = new Term(new Factor(Integer.parseInt(tmp.valor.toString())/Integer.parseInt(fact.toString())));
                                                                                                    }
                                                                                                    else if(fact.getType()==1){
                                                                                                        Simbolo tmp2 = null;
                                                                                                        tmp2 = SymbolTable.buscar(fact.toString());
                                                                                                        if(tmp2==null){
                                                                                                            System.err.println("Error en la linea: "+divleft+" la variable "+fact.toString()+" no existe");
                                                                                                        }
                                                                                                        else if(tmp2!=null&&tmp2.getTipo().equals("integer")){
                                                                                                            if(tmp2.valor == null)
                                                                                                                System.err.println("Error en la linea: "+divleft+"no se le ha asignado un valor a esta variable");
                                                                                                            else
                                                                                                                RESULT = new Term(new Factor(Integer.parseInt(tmp.valor.toString())/Integer.parseInt(tmp2.valor.toString())));   
                                                                                                        }
                                                                                                        else{
                                                                                                            System.err.println("Error en la linea: "+divleft+" no se pueden sumar estos valores, se esperan dos enteros");
                                                                                                        }
                                                                                                    }
                                                                                                    else{
                                                                                                        System.err.println("Error en la linea: "+divleft+" no se pueden dividir estos valores, se esperan dos enteros");
                                                                                                    } 
                                                                                                }
                                                                                            }
                                                                                        }:}
;

factor ::= var:v                                                                {: RESULT = new Factor(v); :}
	|CONSTSTR:str                                                           {: RESULT = new Factor(str); :}
	|CONSTCHAR:ch                                                           {: RESULT = new Factor(ch); :}
	|NUMBER:num                                                             {: RESULT = new Factor(num); :}   
	|LPAREN exp:ex RPAREN                                                   {: RESULT = new Factor(ex); :}
	|NOT factor:ft                                                          {: RESULT = new Factor(ft); :}

;

var ::= ent_var: ent_v                                                          {: RESULT = new Variable(ent_v);:}
        |ind_var: ind_v                                                         {: RESULT = new Variable(ind_v);:}
;

ind_var ::= array_var:ar_v LCOR exp:ex RCOR                                     {: RESULT = new Indexed_variable(ar_v, ex); :}
;

array_var ::= ent_var:e_var                                                     {: RESULT = new Array_variable(e_var);:}
;

ent_var ::= var_ident:var_id                                                    {: RESULT = new Entire_variable(var_id);:} 
;

var_ident ::= ID:id                                                             {: RESULT = new Variable_identifier(id);:}
;
      