/* Import the class java_cup.runtime.*  */
import java_cup.runtime.*;
   
parser code {:
    
    /* Change the method report_error so it will display the line and
       column of where the error occurred in the input as well as the
       reason for the error which is passed into the method in the
       String 'message'. */
    public void report_error(String message, Object info) {
   
        /* Create a StringBuilder called 'm' with the string 'Error' in it. */
        StringBuilder m = new StringBuilder("Error");
   
        /* Check if the information passed to the method is the same
           type as the type java_cup.runtime.Symbol. */
        if (info instanceof java_cup.runtime.Symbol) {
            /* Declare a java_cup.runtime.Symbol object 's' with the
               information in the object info that is being typecasted
               as a java_cup.runtime.Symbol object. */
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
            /* Check if the line number in the input is greater or
               equal to zero. */
            if (s.left >= 0) {                
                /* Add to the end of the StringBuilder error message
                   the line number of the error in the input. */
                m.append(" in line "+(s.left+1));   
                /* Check if the column number in the input is greater
                   or equal to zero. */
                if (s.right >= 0)                    
                    /* Add to the end of the StringBuilder error message
                       the column number of the error in the input. */
                    m.append(", column "+(s.right+1));
            }
         
	
        }
   
        /* Add to the end of the StringBuilder error message created in
           this method the message that was passed into this method. */
        m.append(" : "+message);
   
        /* Print the contents of the StringBuilder 'm', which contains
           an error message, out on a line. */
        System.err.println(m);
    }
   
    /* Change the method report_fatal_error so when it reports a fatal
       error it will display the line and column number of where the
       fatal error occurred in the input as well as the reason for the
       fatal error which is passed into the method in the object
       'message' and then exit.*/
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

		@Override
     public void syntax_error(Symbol token){
  //	String err = "Error en "+((Token)token.value).valor+" en la linea "+ (((Token)token.value).linea+1) + " en la columna: "+((Token)token.value).columna+" ";
       String err = "HAY UN ERROR DE PRUEBA";
        //errores.add(err);
	System.out.print(err);
       }  

:};
   

   
/* ------------Declaration of Terminals and Non Terminals Section----------- */
   
terminal           SEMI, COLON, COMA, ID, INTEGER, CHAR, BOOLEAN, STRING, LCOR, RCOR, DOT, OF, ARRAY, PROGRAM, VAR, PROCEDURE, LPAREN, RPAREN, BEGIN, END;
terminal Integer   NUMBER;
   
non terminal Object     SL, SPP, S, SP, program, var_dec, BLOCK, proc_dec_part, proc_dec, state_dec_part, state_dec;
/*non terminal Integer    E, F, T;*/
   
/* ----------------------------Grammar Section-------------------- */
   
/* The grammar for our parser.
   program ::= PROGRAM ID SEMI BLOCK
   BLOCK ::= var_dec proc_dec_part
   var_dec ::= 
	   |
	   VAR SL 
   SL ::=   SL SPP
	   | SPP
   SPP::=   S SEMI
   S  ::=   ID SP
   SP ::=   COMA ID SP
	   | COLON INTEGER
	   | COLON STRING
	   | COLON CHAR
	   | COLON BOOLEAN
*/
   program ::= PROGRAM ID SEMI BLOCK;
   BLOCK ::= var_dec proc_dec_part;
   var_dec ::= 
	   |
	   VAR SL 
	   ;
   SL ::= SL SPP
	   | SPP;

   SPP ::= S SEMI
	   |
	   S RPAREN SEMI
	   ;
   
   S ::= ID:i SP
	 ;
   
   
   SP ::= COLON INTEGER 
	   | COLON BOOLEAN 
	   | COLON CHAR 
	   | COLON STRING 
	   | COLON ARRAY LCOR NUMBER DOT DOT NUMBER RCOR OF INTEGER
	   | COLON ARRAY LCOR NUMBER DOT DOT NUMBER RCOR OF BOOLEAN 
	   | COLON ARRAY LCOR NUMBER DOT DOT NUMBER RCOR OF CHAR
	   | COMA ID:i SP
	   | COLON error {:System.out.println("Error en declaracion");:}
                 ;

   proc_dec_part ::= 
		|
		PROCEDURE ID:i LPAREN proc_dec 
		;
   proc_dec ::= SL var_dec
		; 
  
