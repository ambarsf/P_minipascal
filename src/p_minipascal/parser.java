
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Jun 16 20:24:44 CST 2017
//----------------------------------------------------

package p_minipascal;

import necessities.*;
import java.util.*;
import java.io.*;
import java_cup.runtime.*;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java.lang.reflect.Field;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Jun 16 20:24:44 CST 2017
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\171\000\002\002\007\000\002\002\004\000\002\002" +
    "\007\000\002\002\007\000\002\002\004\000\002\003\005" +
    "\000\002\047\004\000\002\004\004\000\002\004\002\000" +
    "\002\004\004\000\002\005\005\000\002\005\002\000\002" +
    "\005\005\000\002\045\005\000\002\045\005\000\002\045" +
    "\005\000\002\013\004\000\002\013\002\000\002\014\005" +
    "\000\002\014\005\000\002\046\006\000\002\046\006\000" +
    "\002\046\012\000\002\046\012\000\002\046\012\000\002" +
    "\046\012\000\002\046\012\000\002\050\007\000\002\050" +
    "\007\000\002\050\005\000\002\006\003\000\002\006\003" +
    "\000\002\007\010\000\002\007\010\000\002\007\010\000" +
    "\002\007\010\000\002\010\006\000\002\010\006\000\002" +
    "\010\006\000\002\010\006\000\002\011\003\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\012\003" +
    "\000\002\012\003\000\002\015\005\000\002\015\004\000" +
    "\002\043\005\000\002\043\005\000\002\043\004\000\002" +
    "\043\004\000\002\016\003\000\002\016\003\000\002\017" +
    "\003\000\002\017\003\000\002\017\003\000\002\017\003" +
    "\000\002\021\005\000\002\022\003\000\002\023\003\000" +
    "\002\024\006\000\002\024\006\000\002\024\006\000\002" +
    "\025\003\000\002\026\006\000\002\026\006\000\002\026" +
    "\006\000\002\044\005\000\002\044\003\000\002\027\003" +
    "\000\002\020\003\000\002\020\003\000\002\020\003\000" +
    "\002\020\003\000\002\020\003\000\002\030\006\000\002" +
    "\030\006\000\002\030\010\000\002\031\006\000\002\031" +
    "\006\000\002\051\012\000\002\051\012\000\002\051\012" +
    "\000\002\051\012\000\002\052\006\000\002\052\006\000" +
    "\002\032\003\000\002\032\005\000\002\032\005\000\002" +
    "\032\005\000\002\032\005\000\002\032\005\000\002\032" +
    "\005\000\002\032\003\000\002\033\003\000\002\033\005" +
    "\000\002\033\005\000\002\033\004\000\002\033\004\000" +
    "\002\034\003\000\002\034\005\000\002\034\005\000\002" +
    "\035\003\000\002\035\003\000\002\035\003\000\002\035" +
    "\003\000\002\035\005\000\002\035\003\000\002\035\004" +
    "\000\002\054\006\000\002\053\005\000\002\053\004\000" +
    "\002\053\003\000\002\053\002\000\002\036\003\000\002" +
    "\036\003\000\002\037\006\000\002\040\003\000\002\041" +
    "\003\000\002\042\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\376\000\006\003\005\031\006\001\002\000\004\002" +
    "\u0100\001\002\000\004\062\374\001\002\000\006\003\010" +
    "\062\007\001\002\000\006\003\012\032\011\001\002\000" +
    "\004\002\ufffd\001\002\000\012\003\015\010\013\014\ufff9" +
    "\026\ufff9\001\002\000\012\003\015\010\013\014\ufff9\026" +
    "\ufff9\001\002\000\010\014\ufff6\026\ufff6\062\020\001\002" +
    "\000\006\014\104\026\ufff0\001\002\000\010\014\ufff6\026" +
    "\ufff6\062\020\001\002\000\004\035\017\001\002\000\004" +
    "\002\uffff\001\002\000\010\003\030\033\031\034\027\001" +
    "\002\000\006\003\024\032\023\001\002\000\006\014\ufff8" +
    "\026\ufff8\001\002\000\010\014\ufff6\026\ufff6\062\020\001" +
    "\002\000\010\014\ufff6\026\ufff6\062\020\001\002\000\006" +
    "\014\ufff5\026\ufff5\001\002\000\006\014\ufff7\026\ufff7\001" +
    "\002\000\004\062\020\001\002\000\004\062\020\001\002" +
    "\000\016\003\041\004\032\005\043\006\034\007\035\011" +
    "\033\001\002\000\016\003\uffd8\010\uffd8\026\uffd8\032\uffd8" +
    "\034\uffd8\045\uffd8\001\002\000\006\003\044\046\045\001" +
    "\002\000\016\003\uffd6\010\uffd6\026\uffd6\032\uffd6\034\uffd6" +
    "\045\uffd6\001\002\000\016\003\uffd5\010\uffd5\026\uffd5\032" +
    "\uffd5\034\uffd5\045\uffd5\001\002\000\016\003\uffd9\010\uffd9" +
    "\026\uffd9\032\uffd9\034\uffd9\045\uffd9\001\002\000\016\003" +
    "\uffe2\010\uffe2\026\uffe2\032\uffe2\034\uffe2\045\uffe2\001\002" +
    "\000\006\003\ufff2\032\ufff2\001\002\000\016\003\uffd4\010" +
    "\uffd4\026\uffd4\032\uffd4\034\uffd4\045\uffd4\001\002\000\016" +
    "\003\uffe3\010\uffe3\026\uffe3\032\uffe3\034\uffe3\045\uffe3\001" +
    "\002\000\016\003\uffd7\010\uffd7\026\uffd7\032\uffd7\034\uffd7" +
    "\045\uffd7\001\002\000\006\003\046\064\050\001\002\000" +
    "\006\003\046\064\050\001\002\000\004\035\070\001\002" +
    "\000\006\003\061\047\060\001\002\000\006\003\051\035" +
    "\052\001\002\000\004\035\056\001\002\000\004\035\053" +
    "\001\002\000\006\003\054\064\055\001\002\000\006\003" +
    "\uffda\047\uffda\001\002\000\006\003\uffdd\047\uffdd\001\002" +
    "\000\004\064\057\001\002\000\006\003\uffdc\047\uffdc\001" +
    "\002\000\006\003\064\030\065\001\002\000\004\030\062" +
    "\001\002\000\014\003\041\004\032\005\043\006\034\007" +
    "\035\001\002\000\016\003\uffdf\010\uffdf\026\uffdf\032\uffdf" +
    "\034\uffdf\045\uffdf\001\002\000\014\003\041\004\032\005" +
    "\043\006\034\007\035\001\002\000\014\003\041\004\032" +
    "\005\043\006\034\007\035\001\002\000\016\003\uffe1\010" +
    "\uffe1\026\uffe1\032\uffe1\034\uffe1\045\uffe1\001\002\000\016" +
    "\003\uffde\010\uffde\026\uffde\032\uffde\034\uffde\045\uffde\001" +
    "\002\000\004\035\071\001\002\000\004\064\072\001\002" +
    "\000\006\003\uffdb\047\uffdb\001\002\000\004\047\074\001" +
    "\002\000\004\030\075\001\002\000\014\003\041\004\032" +
    "\005\043\006\034\007\035\001\002\000\016\003\uffe0\010" +
    "\uffe0\026\uffe0\032\uffe0\034\uffe0\045\uffe0\001\002\000\006" +
    "\003\ufff3\032\ufff3\001\002\000\006\003\ufff4\032\ufff4\001" +
    "\002\000\010\003\015\010\013\026\ufff9\001\002\000\006" +
    "\014\104\026\ufff0\001\002\000\004\026\146\001\002\000" +
    "\004\062\105\001\002\000\010\003\106\033\107\044\110" +
    "\001\002\000\020\003\041\004\032\005\043\006\034\007" +
    "\035\011\033\062\111\001\002\000\016\003\041\004\032" +
    "\005\043\006\034\007\035\011\033\001\002\000\004\062" +
    "\111\001\002\000\006\003\127\033\130\001\002\000\006" +
    "\003\114\045\113\001\002\000\006\003\120\033\121\001" +
    "\002\000\004\033\115\001\002\000\016\003\041\004\032" +
    "\005\043\006\034\007\035\011\033\001\002\000\004\032" +
    "\117\001\002\000\010\003\uffe9\010\uffe9\026\uffe9\001\002" +
    "\000\016\003\041\004\032\005\043\006\034\007\035\011" +
    "\033\001\002\000\016\003\041\004\032\005\043\006\034" +
    "\007\035\011\033\001\002\000\006\003\124\032\123\001" +
    "\002\000\010\003\uffeb\010\uffeb\026\uffeb\001\002\000\010" +
    "\003\uffe7\010\uffe7\026\uffe7\001\002\000\004\032\126\001" +
    "\002\000\010\003\uffe8\010\uffe8\026\uffe8\001\002\000\016" +
    "\003\041\004\032\005\043\006\034\007\035\011\033\001" +
    "\002\000\016\003\041\004\032\005\043\006\034\007\035" +
    "\011\033\001\002\000\010\003\uffe4\034\132\045\uffe4\001" +
    "\002\000\004\062\111\001\002\000\006\003\uffe6\045\uffe6" +
    "\001\002\000\004\034\135\001\002\000\004\062\111\001" +
    "\002\000\006\003\uffe5\045\uffe5\001\002\000\010\003\uffed" +
    "\010\uffed\026\uffed\001\002\000\010\003\uffec\010\uffec\026" +
    "\uffec\001\002\000\004\045\142\001\002\000\004\033\143" +
    "\001\002\000\016\003\041\004\032\005\043\006\034\007" +
    "\035\011\033\001\002\000\004\032\145\001\002\000\010" +
    "\003\uffea\010\uffea\026\uffea\001\002\000\024\015\163\017" +
    "\154\021\175\023\176\026\146\027\161\036\150\037\164" +
    "\062\165\001\002\000\004\035\ufffc\001\002\000\006\003" +
    "\352\044\353\001\002\000\010\003\uffb7\016\uffb7\032\uffb7" +
    "\001\002\000\010\003\uffb8\016\uffb8\032\uffb8\001\002\000" +
    "\010\003\uffc6\016\uffc6\032\uffc6\001\002\000\024\003\223" +
    "\040\207\041\222\044\213\056\211\062\214\063\210\064" +
    "\215\065\221\001\002\000\010\003\uffb9\016\uffb9\032\uffb9" +
    "\001\002\000\004\046\342\001\002\000\010\003\uffcc\016" +
    "\uffcc\032\uffcc\001\002\000\010\003\uffca\016\uffca\032\uffca" +
    "\001\002\000\012\003\uffd2\016\uffd2\032\uffd2\035\uffd2\001" +
    "\002\000\010\003\uffba\016\uffba\032\uffba\001\002\000\024" +
    "\003\223\040\207\041\222\044\213\056\211\062\214\063" +
    "\210\064\215\065\221\001\002\000\006\003\320\044\321" +
    "\001\002\000\014\003\uffc5\016\uffc5\032\uffc5\046\uff89\061" +
    "\uff89\001\002\000\052\003\uff8a\016\uff8a\020\uff8a\025\uff8a" +
    "\032\uff8a\034\uff8a\040\uff8a\041\uff8a\042\uff8a\043\uff8a\045" +
    "\uff8a\046\uff8a\047\uff8a\050\uff8a\051\uff8a\052\uff8a\053\uff8a" +
    "\054\uff8a\055\uff8a\061\uff8a\001\002\000\010\003\uffcb\016" +
    "\uffcb\032\uffcb\001\002\000\052\003\uff8e\016\uff8e\020\uff8e" +
    "\025\uff8e\032\uff8e\034\uff8e\040\uff8e\041\uff8e\042\uff8e\043" +
    "\uff8e\045\uff8e\046\uff8b\047\uff8e\050\uff8e\051\uff8e\052\uff8e" +
    "\053\uff8e\054\uff8e\055\uff8e\061\uff8e\001\002\000\010\003" +
    "\uffcd\016\uffcd\032\uffcd\001\002\000\010\003\uffc8\016\uffc8" +
    "\032\uffc8\001\002\000\006\003\315\032\314\001\002\000" +
    "\004\061\312\001\002\000\004\062\267\001\002\000\022" +
    "\015\163\017\154\021\175\023\176\026\146\036\150\037" +
    "\164\062\165\001\002\000\050\003\uff8d\016\uff8d\020\uff8d" +
    "\025\uff8d\032\uff8d\034\uff8d\040\uff8d\041\uff8d\042\uff8d\043" +
    "\uff8d\045\uff8d\047\uff8d\050\uff8d\051\uff8d\052\uff8d\053\uff8d" +
    "\054\uff8d\055\uff8d\061\uff8d\001\002\000\010\003\uffb6\016" +
    "\uffb6\032\uffb6\001\002\000\004\027\203\001\002\000\010" +
    "\003\uffc9\016\uffc9\032\uffc9\001\002\000\012\003\uffd3\016" +
    "\uffd3\032\uffd3\035\uffd3\001\002\000\006\003\205\024\206" +
    "\001\002\000\024\003\223\040\207\041\222\044\213\056" +
    "\211\062\214\063\210\064\215\065\221\001\002\000\024" +
    "\003\223\040\207\041\222\044\213\056\211\062\214\063" +
    "\210\064\215\065\221\001\002\000\016\044\213\056\211" +
    "\062\214\063\210\064\215\065\221\001\002\000\046\003" +
    "\uff99\016\uff99\020\uff99\025\uff99\032\uff99\034\uff99\040\uff99" +
    "\041\uff99\042\uff99\043\uff99\045\uff99\047\uff99\050\uff99\051" +
    "\uff99\052\uff99\053\uff99\054\uff99\055\uff99\001\002\000\016" +
    "\044\213\056\211\062\214\063\210\064\215\065\221\001" +
    "\002\000\010\003\uffac\016\uffac\032\uffac\001\002\000\024" +
    "\003\223\040\207\041\222\044\213\056\211\062\214\063" +
    "\210\064\215\065\221\001\002\000\052\003\uff89\016\uff89" +
    "\020\uff89\025\uff89\032\uff89\034\uff89\040\uff89\041\uff89\042" +
    "\uff89\043\uff89\044\253\045\uff89\046\uff89\047\uff89\050\uff89" +
    "\051\uff89\052\uff89\053\uff89\054\uff89\055\uff89\001\002\000" +
    "\046\003\uff97\016\uff97\020\uff97\025\uff97\032\uff97\034\uff97" +
    "\040\uff97\041\uff97\042\uff97\043\uff97\045\uff97\047\uff97\050" +
    "\uff97\051\uff97\052\uff97\053\uff97\054\uff97\055\uff97\001\002" +
    "\000\046\003\uff9d\016\uff9d\020\uff9d\025\uff9d\032\uff9d\034" +
    "\uff9d\040\uff9d\041\uff9d\042\uff9d\043\uff9d\045\uff9d\047\uff9d" +
    "\050\uff9d\051\uff9d\052\uff9d\053\uff9d\054\uff9d\055\uff9d\001" +
    "\002\000\046\003\uffa2\016\uffa2\020\uffa2\025\uffa2\032\uffa2" +
    "\034\uffa2\040\uffa2\041\uffa2\042\230\043\227\045\uffa2\047" +
    "\uffa2\050\uffa2\051\uffa2\052\uffa2\053\uffa2\054\uffa2\055\uffa2" +
    "\001\002\000\042\003\uffaa\016\uffaa\020\uffaa\025\uffaa\032" +
    "\uffaa\034\uffaa\040\236\041\237\045\uffaa\047\uffaa\050\233" +
    "\051\234\052\235\053\240\054\241\055\242\001\002\000" +
    "\046\003\uff98\016\uff98\020\uff98\025\uff98\032\uff98\034\uff98" +
    "\040\uff98\041\uff98\042\uff98\043\uff98\045\uff98\047\uff98\050" +
    "\uff98\051\uff98\052\uff98\053\uff98\054\uff98\055\uff98\001\002" +
    "\000\016\044\213\056\211\062\214\063\210\064\215\065" +
    "\221\001\002\000\022\003\uffa3\016\uffa3\020\uffa3\025\uffa3" +
    "\032\uffa3\034\uffa3\045\uffa3\047\uffa3\001\002\000\046\003" +
    "\uff95\016\uff95\020\uff95\025\uff95\032\uff95\034\uff95\040\uff95" +
    "\041\uff95\042\uff95\043\uff95\045\uff95\047\uff95\050\uff95\051" +
    "\uff95\052\uff95\053\uff95\054\uff95\055\uff95\001\002\000\046" +
    "\003\uff9a\016\uff9a\020\uff9a\025\uff9a\032\uff9a\034\uff9a\040" +
    "\uff9a\041\uff9a\042\uff9a\043\uff9a\045\uff9a\047\uff9a\050\uff9a" +
    "\051\uff9a\052\uff9a\053\uff9a\054\uff9a\055\uff9a\001\002\000" +
    "\046\003\uff9e\016\uff9e\020\uff9e\025\uff9e\032\uff9e\034\uff9e" +
    "\040\uff9e\041\uff9e\042\230\043\227\045\uff9e\047\uff9e\050" +
    "\uff9e\051\uff9e\052\uff9e\053\uff9e\054\uff9e\055\uff9e\001\002" +
    "\000\016\044\213\056\211\062\214\063\210\064\215\065" +
    "\221\001\002\000\016\044\213\056\211\062\214\063\210" +
    "\064\215\065\221\001\002\000\046\003\uff9c\016\uff9c\020" +
    "\uff9c\025\uff9c\032\uff9c\034\uff9c\040\uff9c\041\uff9c\042\uff9c" +
    "\043\uff9c\045\uff9c\047\uff9c\050\uff9c\051\uff9c\052\uff9c\053" +
    "\uff9c\054\uff9c\055\uff9c\001\002\000\046\003\uff9b\016\uff9b" +
    "\020\uff9b\025\uff9b\032\uff9b\034\uff9b\040\uff9b\041\uff9b\042" +
    "\uff9b\043\uff9b\045\uff9b\047\uff9b\050\uff9b\051\uff9b\052\uff9b" +
    "\053\uff9b\054\uff9b\055\uff9b\001\002\000\022\040\207\041" +
    "\222\044\213\056\211\062\214\063\210\064\215\065\221" +
    "\001\002\000\022\040\207\041\222\044\213\056\211\062" +
    "\214\063\210\064\215\065\221\001\002\000\022\040\207" +
    "\041\222\044\213\056\211\062\214\063\210\064\215\065" +
    "\221\001\002\000\016\044\213\056\211\062\214\063\210" +
    "\064\215\065\221\001\002\000\016\044\213\056\211\062" +
    "\214\063\210\064\215\065\221\001\002\000\022\040\207" +
    "\041\222\044\213\056\211\062\214\063\210\064\215\065" +
    "\221\001\002\000\022\040\207\041\222\044\213\056\211" +
    "\062\214\063\210\064\215\065\221\001\002\000\022\040" +
    "\207\041\222\044\213\056\211\062\214\063\210\064\215" +
    "\065\221\001\002\000\026\003\uffa9\016\uffa9\020\uffa9\025" +
    "\uffa9\032\uffa9\034\uffa9\040\236\041\237\045\uffa9\047\uffa9" +
    "\001\002\000\026\003\uffa8\016\uffa8\020\uffa8\025\uffa8\032" +
    "\uffa8\034\uffa8\040\236\041\237\045\uffa8\047\uffa8\001\002" +
    "\000\026\003\uffa7\016\uffa7\020\uffa7\025\uffa7\032\uffa7\034" +
    "\uffa7\040\236\041\237\045\uffa7\047\uffa7\001\002\000\046" +
    "\003\uffa0\016\uffa0\020\uffa0\025\uffa0\032\uffa0\034\uffa0\040" +
    "\uffa0\041\uffa0\042\230\043\227\045\uffa0\047\uffa0\050\uffa0" +
    "\051\uffa0\052\uffa0\053\uffa0\054\uffa0\055\uffa0\001\002\000" +
    "\046\003\uffa1\016\uffa1\020\uffa1\025\uffa1\032\uffa1\034\uffa1" +
    "\040\uffa1\041\uffa1\042\230\043\227\045\uffa1\047\uffa1\050" +
    "\uffa1\051\uffa1\052\uffa1\053\uffa1\054\uffa1\055\uffa1\001\002" +
    "\000\026\003\uffa4\016\uffa4\020\uffa4\025\uffa4\032\uffa4\034" +
    "\uffa4\040\236\041\237\045\uffa4\047\uffa4\001\002\000\026" +
    "\003\uffa6\016\uffa6\020\uffa6\025\uffa6\032\uffa6\034\uffa6\040" +
    "\236\041\237\045\uffa6\047\uffa6\001\002\000\026\003\uffa5" +
    "\016\uffa5\020\uffa5\025\uffa5\032\uffa5\034\uffa5\040\236\041" +
    "\237\045\uffa5\047\uffa5\001\002\000\020\044\213\045\uff8f" +
    "\056\211\062\214\063\210\064\215\065\221\001\002\000" +
    "\004\045\261\001\002\000\010\003\257\034\256\045\uff90" +
    "\001\002\000\020\044\213\045\uff8f\056\211\062\214\063" +
    "\210\064\215\065\221\001\002\000\004\045\uff91\001\002" +
    "\000\004\045\uff92\001\002\000\046\003\uff93\016\uff93\020" +
    "\uff93\025\uff93\032\uff93\034\uff93\040\uff93\041\uff93\042\uff93" +
    "\043\uff93\045\uff93\047\uff93\050\uff93\051\uff93\052\uff93\053" +
    "\uff93\054\uff93\055\uff93\001\002\000\004\045\263\001\002" +
    "\000\046\003\uff96\016\uff96\020\uff96\025\uff96\032\uff96\034" +
    "\uff96\040\uff96\041\uff96\042\uff96\043\uff96\045\uff96\047\uff96" +
    "\050\uff96\051\uff96\052\uff96\053\uff96\054\uff96\055\uff96\001" +
    "\002\000\046\003\uff94\016\uff94\020\uff94\025\uff94\032\uff94" +
    "\034\uff94\040\uff94\041\uff94\042\uff94\043\uff94\045\uff94\047" +
    "\uff94\050\uff94\051\uff94\052\uff94\053\uff94\054\uff94\055\uff94" +
    "\001\002\000\046\003\uff9f\016\uff9f\020\uff9f\025\uff9f\032" +
    "\uff9f\034\uff9f\040\uff9f\041\uff9f\042\230\043\227\045\uff9f" +
    "\047\uff9f\050\uff9f\051\uff9f\052\uff9f\053\uff9f\054\uff9f\055" +
    "\uff9f\001\002\000\010\003\uffab\016\uffab\032\uffab\001\002" +
    "\000\006\003\270\061\271\001\002\000\004\064\305\001" +
    "\002\000\004\064\272\001\002\000\006\003\274\022\273" +
    "\001\002\000\004\064\300\001\002\000\004\064\275\001" +
    "\002\000\004\020\276\001\002\000\004\026\146\001\002" +
    "\000\010\003\uffae\016\uffae\032\uffae\001\002\000\006\003" +
    "\302\020\301\001\002\000\004\026\146\001\002\000\004" +
    "\026\146\001\002\000\010\003\uffad\016\uffad\032\uffad\001" +
    "\002\000\010\003\uffb0\016\uffb0\032\uffb0\001\002\000\004" +
    "\022\306\001\002\000\004\064\307\001\002\000\004\020" +
    "\310\001\002\000\004\026\146\001\002\000\010\003\uffaf" +
    "\016\uffaf\032\uffaf\001\002\000\024\003\223\040\207\041" +
    "\222\044\213\056\211\062\214\063\210\064\215\065\221" +
    "\001\002\000\010\003\uffc7\016\uffc7\032\uffc7\001\002\000" +
    "\030\003\uffcf\015\163\017\154\021\175\023\176\024\uffcf" +
    "\026\146\027\uffcf\036\150\037\164\062\165\001\002\000" +
    "\030\003\uffce\015\163\017\154\021\175\023\176\024\uffce" +
    "\026\146\027\uffce\036\150\037\164\062\165\001\002\000" +
    "\010\003\uffd0\024\uffd0\027\uffd0\001\002\000\010\003\uffd1" +
    "\024\uffd1\027\uffd1\001\002\000\024\003\223\040\207\041" +
    "\222\044\213\056\211\062\214\063\210\064\215\065\221" +
    "\001\002\000\024\003\223\040\207\041\222\044\213\056" +
    "\211\062\214\063\210\064\215\065\221\001\002\000\010" +
    "\003\uffbb\034\uffbb\045\uffbb\001\002\000\006\003\330\045" +
    "\327\001\002\000\010\003\uffbc\034\325\045\uffbc\001\002" +
    "\000\024\003\223\040\207\041\222\044\213\056\211\062" +
    "\214\063\210\064\215\065\221\001\002\000\006\003\uffbd" +
    "\045\uffbd\001\002\000\010\003\uffc0\016\uffc0\032\uffc0\001" +
    "\002\000\010\003\uffbe\016\uffbe\032\uffbe\001\002\000\004" +
    "\045\332\001\002\000\010\003\uffbf\016\uffbf\032\uffbf\001" +
    "\002\000\006\003\334\025\335\001\002\000\022\015\163" +
    "\017\154\021\175\023\176\026\146\036\150\037\164\062" +
    "\165\001\002\000\022\015\163\017\154\021\175\023\176" +
    "\026\146\036\150\037\164\062\165\001\002\000\010\003" +
    "\uffb5\016\337\032\uffb5\001\002\000\022\015\163\017\154" +
    "\021\175\023\176\026\146\036\150\037\164\062\165\001" +
    "\002\000\010\003\uffb3\016\uffb3\032\uffb3\001\002\000\010" +
    "\003\uffb4\016\uffb4\032\uffb4\001\002\000\024\003\223\040" +
    "\207\041\222\044\213\056\211\062\214\063\210\064\215" +
    "\065\221\001\002\000\004\047\344\001\002\000\050\003" +
    "\uff8c\016\uff8c\020\uff8c\025\uff8c\032\uff8c\034\uff8c\040\uff8c" +
    "\041\uff8c\042\uff8c\043\uff8c\045\uff8c\047\uff8c\050\uff8c\051" +
    "\uff8c\052\uff8c\053\uff8c\054\uff8c\055\uff8c\061\uff8c\001\002" +
    "\000\006\003\347\020\346\001\002\000\022\015\163\017" +
    "\154\021\175\023\176\026\146\036\150\037\164\062\165" +
    "\001\002\000\022\015\163\017\154\021\175\023\176\026" +
    "\146\036\150\037\164\062\165\001\002\000\010\003\uffb1" +
    "\016\uffb1\032\uffb1\001\002\000\010\003\uffb2\016\uffb2\032" +
    "\uffb2\001\002\000\004\062\354\001\002\000\004\062\354" +
    "\001\002\000\010\003\uff89\045\uff89\046\uff89\001\002\000" +
    "\006\003\uffc1\045\uffc1\001\002\000\006\003\360\045\357" +
    "\001\002\000\010\003\uffc4\016\uffc4\032\uffc4\001\002\000" +
    "\010\003\uffc2\016\uffc2\032\uffc2\001\002\000\004\045\362" +
    "\001\002\000\010\003\uffc3\016\uffc3\032\uffc3\001\002\000" +
    "\004\026\ufff1\001\002\000\004\026\146\001\002\000\006" +
    "\003\367\032\366\001\002\000\006\014\uffef\026\uffef\001" +
    "\002\000\006\014\uffee\026\uffee\001\002\000\006\003\ufffb" +
    "\032\ufffb\001\002\000\006\014\ufffa\026\ufffa\001\002\000" +
    "\004\035\373\001\002\000\004\002\001\001\002\000\004" +
    "\032\375\001\002\000\012\003\015\010\013\014\ufff9\026" +
    "\ufff9\001\002\000\004\035\377\001\002\000\004\002\ufffe" +
    "\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\376\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\003\371\004\013\001\001\000\006\003" +
    "\015\004\013\001\001\000\006\005\370\045\020\001\001" +
    "\000\010\013\102\014\101\046\100\001\001\000\006\005" +
    "\021\045\020\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\005\025\045\020\001\001\000\006\005\024\045\020" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\045" +
    "\077\001\001\000\004\045\076\001\001\000\012\006\037" +
    "\007\036\011\041\012\035\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\010\072" +
    "\001\001\000\004\010\046\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\011\062\012\035\001\001\000" +
    "\002\001\001\000\006\011\066\012\035\001\001\000\006" +
    "\011\065\012\035\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\011\075\012" +
    "\035\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\004\363\047\364\001\001\000\010\013" +
    "\362\014\101\046\100\001\001\000\004\015\146\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\006\137\007" +
    "\036\011\041\012\035\050\140\001\001\000\012\006\136" +
    "\007\036\011\041\012\035\001\001\000\004\050\111\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\006\115\007\036\011\041\012" +
    "\035\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\006\124\007\036\011\041\012\035\001\001\000\012\006" +
    "\121\007\036\011\041\012\035\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\006\133\007\036\011\041\012\035" +
    "\001\001\000\012\006\130\007\036\011\041\012\035\001" +
    "\001\000\002\001\001\000\004\050\132\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\050\135\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\006\143\007\036\011" +
    "\041\012\035\001\001\000\002\001\001\000\002\001\001" +
    "\000\050\015\161\016\172\017\170\020\156\021\166\022" +
    "\157\023\152\024\201\026\171\030\154\031\151\036\173" +
    "\037\176\040\155\041\167\042\165\043\200\051\150\052" +
    "\177\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\032" +
    "\344\033\217\034\216\035\215\036\224\037\176\040\155" +
    "\041\167\042\165\054\223\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\032\332\033\217\034" +
    "\216\035\215\036\224\037\176\040\155\041\167\042\165" +
    "\054\223\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\050\015\161\016\172\017\170" +
    "\020\156\021\166\022\157\023\152\024\201\026\171\030" +
    "\154\031\151\036\173\037\176\040\155\041\167\042\165" +
    "\043\203\051\150\052\177\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\032\265\033\217\034" +
    "\216\035\215\036\224\037\176\040\155\041\167\042\165" +
    "\054\223\001\001\000\026\032\211\033\217\034\216\035" +
    "\215\036\224\037\176\040\155\041\167\042\165\054\223" +
    "\001\001\000\022\034\264\035\215\036\224\037\176\040" +
    "\155\041\167\042\165\054\223\001\001\000\002\001\001" +
    "\000\020\035\263\036\224\037\176\040\155\041\167\042" +
    "\165\054\223\001\001\000\002\001\001\000\026\032\261" +
    "\033\217\034\216\035\215\036\224\037\176\040\155\041" +
    "\167\042\165\054\223\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\034\225\035\215\036\224" +
    "\037\176\040\155\041\167\042\165\054\223\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\035\231\036\224\037\176\040\155\041" +
    "\167\042\165\054\223\001\001\000\020\035\230\036\224" +
    "\037\176\040\155\041\167\042\165\054\223\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\033\251\034\216" +
    "\035\215\036\224\037\176\040\155\041\167\042\165\054" +
    "\223\001\001\000\024\033\250\034\216\035\215\036\224" +
    "\037\176\040\155\041\167\042\165\054\223\001\001\000" +
    "\024\033\247\034\216\035\215\036\224\037\176\040\155" +
    "\041\167\042\165\054\223\001\001\000\022\034\246\035" +
    "\215\036\224\037\176\040\155\041\167\042\165\054\223" +
    "\001\001\000\022\034\245\035\215\036\224\037\176\040" +
    "\155\041\167\042\165\054\223\001\001\000\024\033\244" +
    "\034\216\035\215\036\224\037\176\040\155\041\167\042" +
    "\165\054\223\001\001\000\024\033\243\034\216\035\215" +
    "\036\224\037\176\040\155\041\167\042\165\054\223\001" +
    "\001\000\024\033\242\034\216\035\215\036\224\037\176" +
    "\040\155\041\167\042\165\054\223\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\035\254\036\224\037\176\040\155" +
    "\041\167\042\165\053\253\054\223\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\035\254\036\224\037\176" +
    "\040\155\041\167\042\165\053\257\054\223\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\276\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\015\303\001" +
    "\001\000\004\015\302\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\015\310\001\001\000\002\001\001\000\026" +
    "\032\312\033\217\034\216\035\215\036\224\037\176\040" +
    "\155\041\167\042\165\054\223\001\001\000\002\001\001" +
    "\000\050\015\161\016\172\017\170\020\156\021\166\022" +
    "\157\023\152\024\201\026\171\030\154\031\151\036\173" +
    "\037\176\040\155\041\167\042\165\043\316\051\150\052" +
    "\177\001\001\000\050\015\161\016\172\017\170\020\156" +
    "\021\166\022\157\023\152\024\201\026\171\030\154\031" +
    "\151\036\173\037\176\040\155\041\167\042\165\043\315" +
    "\051\150\052\177\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\027\323\032\321\033\217\034\216\035\215" +
    "\036\224\037\176\040\155\041\167\042\165\044\330\054" +
    "\223\001\001\000\032\027\323\032\321\033\217\034\216" +
    "\035\215\036\224\037\176\040\155\041\167\042\165\044" +
    "\322\054\223\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\027\323\032\321\033\217\034" +
    "\216\035\215\036\224\037\176\040\155\041\167\042\165" +
    "\044\325\054\223\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\046\015\161\016\340\017\170\020" +
    "\156\021\166\022\157\023\152\024\201\026\171\030\154" +
    "\031\151\036\173\037\176\040\155\041\167\042\165\051" +
    "\150\052\177\001\001\000\046\015\161\016\335\017\170" +
    "\020\156\021\166\022\157\023\152\024\201\026\171\030" +
    "\154\031\151\036\173\037\176\040\155\041\167\042\165" +
    "\051\150\052\177\001\001\000\002\001\001\000\046\015" +
    "\161\016\337\017\170\020\156\021\166\022\157\023\152" +
    "\024\201\026\171\030\154\031\151\036\173\037\176\040" +
    "\155\041\167\042\165\051\150\052\177\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\032\342\033\217\034" +
    "\216\035\215\036\224\037\176\040\155\041\167\042\165" +
    "\054\223\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\046\015\161\016\350\017\170\020\156" +
    "\021\166\022\157\023\152\024\201\026\171\030\154\031" +
    "\151\036\173\037\176\040\155\041\167\042\165\051\150" +
    "\052\177\001\001\000\046\015\161\016\347\017\170\020" +
    "\156\021\166\022\157\023\152\024\201\026\171\030\154" +
    "\031\151\036\173\037\176\040\155\041\167\042\165\051" +
    "\150\052\177\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\025\360\036\354\037\176\040\155\041\167\042" +
    "\165\001\001\000\016\025\355\036\354\037\176\040\155" +
    "\041\167\042\165\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\015\367\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\003\375\004\013\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    static SymbolTable tablaSimbolos = new SymbolTable();
    static int verificarTipo = 0;
    static Stack<String> listaIdentificadores = new Stack<String>();
    Symbol cur_token;

    

    public final Class getSymbolContainer() {
        return sym.class;
    }

    public String symbl_name_from_id(int id){
              Field[] fields = getSymbolContainer().getFields();
              for(Field f : fields){
                      try {
                            if (f.getInt(null)==id)
                              return f.getName();
                    } catch (IllegalArgumentException e) {
                            //e.printStackTrace();
                    } catch (IllegalAccessException e) {
                            //e.printStackTrace();
                    }
              }
              return "invalid symbol id";
      }; 
      
    public void syntax_error(Symbol cur_token){
        System.err.print("Syntax error at line: " + (cur_token.left + 1) + ", col: " + (cur_token.right + 1) + " found symbol: " + symbl_name_from_id(cur_token.sym));
}

public void unrecovered_syntax_error(Symbol cur_token) {
        //System.err.println("Please check your program's syntax before line: " + (cur_token.left + 1) + ", col: " + (cur_token.right + 1));
    }

    public void report_fatal_error(String message, Object info) {
        // Nothing
    }
    
    public void report_error(String message, Object info) {
        //Nothing
    }




}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // var_ident ::= ID 
            {
              Variable_identifier RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Variable_identifier(id);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_ident",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // ent_var ::= var_ident 
            {
              Entire_variable RESULT =null;
		int var_idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var_idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Variable_identifier var_id = (Variable_identifier)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Entire_variable(var_id);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ent_var",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // array_var ::= ent_var 
            {
              Array_variable RESULT =null;
		int e_varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e_varright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Entire_variable e_var = (Entire_variable)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Array_variable(e_var);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_var",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // ind_var ::= array_var LCOR exp RCOR 
            {
              Indexed_variable RESULT =null;
		int ar_vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int ar_vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Array_variable ar_v = (Array_variable)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression ex = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Indexed_variable(ar_v, ex); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ind_var",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // var ::= ind_var 
            {
              Variable RESULT =null;
		int ind_vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ind_vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Indexed_variable ind_v = (Indexed_variable)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Variable(ind_v);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // var ::= ent_var 
            {
              Variable RESULT =null;
		int ent_vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ent_vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Entire_variable ent_v = (Entire_variable)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Variable(ent_v);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // c_params ::= 
            {
              Caller_params RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("c_params",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // c_params ::= factor 
            {
              Caller_params RESULT =null;
		int factleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int factright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Factor fact = (Factor)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Caller_params(fact); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("c_params",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // c_params ::= factor error 
            {
              Caller_params RESULT =null;
		int factleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int factright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Factor fact = (Factor)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.err.println(" , expected"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("c_params",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // c_params ::= factor COMMA c_params 
            {
              Caller_params RESULT =null;
		int factleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int factright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Factor fact = (Factor)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int c_pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c_pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Caller_params c_p = (Caller_params)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 c_p.add(new Factor(fact)); RESULT = c_p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("c_params",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // caller ::= ID LPAREN c_params RPAREN 
            {
              Caller RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int c_pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int c_pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Caller_params c_p = (Caller_params)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Caller(id, c_p); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("caller",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // factor ::= NOT factor 
            {
              Factor RESULT =null;
		int ftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ftright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Factor ft = (Factor)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Factor(ft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // factor ::= caller 
            {
              Factor RESULT =null;
		int callyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int callyright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Caller cally = (Caller)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Factor (cally); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // factor ::= LPAREN exp RPAREN 
            {
              Factor RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression ex = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Factor(ex); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // factor ::= NUMBER 
            {
              Factor RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Factor(num); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // factor ::= CONSTCHAR 
            {
              Factor RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int chright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Character ch = (Character)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Factor(ch); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // factor ::= CONSTSTR 
            {
              Factor RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Factor(str); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // factor ::= var 
            {
              Factor RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Factor(v); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // term ::= term DIVIDE factor 
            {
              Term RESULT =null;
		int termleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int termright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Term term = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int divleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int divright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object div = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int factleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int factright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Factor fact = (Factor)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                                                    if(term.getFact().getType()==4){
                                                                                        if(fact.getType()==4){
                                                                                            RESULT = new Term(new Factor(Integer.parseInt(term.toString())/Integer.parseInt(fact.toString())));
                                                                                        }
                                                                                        else if(fact.getType()==1){
                                                                                            Simbolo tmp2 = null;
                                                                                            tmp2 = SymbolTable.buscar(fact.toString());
                                                                                            if(tmp2==null){
                                                                                                System.err.println("Error en la linea: "+divleft+" la variable "+fact.toString()+" no existe");
                                                                                            }
                                                                                            else if(tmp2!=null&&tmp2.getTipo().equals("integer")){
                                                                                                String ambito2 = SymbolTable.verificarAmbito(tmp2.nombre);
                                                                                                if(tmp2.valor == null)
                                                                                                    System.err.println("Error en la linea: "+divleft+"no se le ha asignado un valor a esta variable");
                                                                                                else
                                                                                                    if ((ambito2.equals(SymbolTable.profundidad))|| (ambito2.equals("main")) ||(ambito2.contains(SymbolTable.profundidad))){
                                                                                                        RESULT = new Term(new Factor(Integer.parseInt(term.toString())/Integer.parseInt(tmp2.valor.toString())));
                                                                                                    }else{
                                                                                                        System.err.println("Error en la linea: "+divleft+" ,variable no ha sido declarada");  
                                                                                                    } 
                                                                                            }
                                                                                            else{
                                                                                                System.err.println("Error en la linea: "+divleft+" no se pueden sumar estos valores, se esperan dos enteros");
                                                                                            }
                                                                                        }
                                                                                        else{
                                                                                            System.err.println("Error en la linea: "+divleft+" no se pueden dividir estos valores, se esperan dos enteros");
                                                                                        }
                                                                                    }
                                                                                    else if(term.getFact().getType()==1){
                                                                                        Simbolo tmp = null;
                                                                                        tmp = SymbolTable.buscar(term.toString());
                                                                                        if(tmp == null){
                                                                                            System.err.println("Error en la linea: "+divleft+" variable "+term.toString()+" no existe");
                                                                                        }
                                                                                        else if(tmp!=null){
                                                                                            if(tmp.valor == null)
                                                                                                System.err.println("Error en la linea: "+divleft+"no se le ha asignado un valor a esta variable");
                                                                                            else
                                                                                                if(tmp.getTipo().equals("integer")){
                                                                                                    String ambito = SymbolTable.verificarAmbito(tmp.nombre);
                                                                                                    if(fact.getType()==4){
                                                                                                        if ((ambito.equals(SymbolTable.profundidad))|| (ambito.equals("main")) ||(ambito.contains(SymbolTable.profundidad))){
                                                                                                            RESULT = new Term(new Factor(Integer.parseInt(tmp.valor.toString())/Integer.parseInt(fact.toString())));
                                                                                                        }else{
                                                                                                            System.err.println("Error en la linea: "+divleft+" ,variable no ha sido declarada");  
                                                                                                        } 
                                                                                                    }
                                                                                                    else if(fact.getType()==1){
                                                                                                        Simbolo tmp2 = null;
                                                                                                        tmp2 = SymbolTable.buscar(fact.toString());
                                                                                                        if(tmp2==null){
                                                                                                            System.err.println("Error en la linea: "+divleft+" la variable "+fact.toString()+" no existe");
                                                                                                        }
                                                                                                        else if(tmp2!=null&&tmp2.getTipo().equals("integer")){
                                                                                                            String ambito2 = SymbolTable.verificarAmbito(tmp2.nombre);
                                                                                                            if(tmp2.valor == null)
                                                                                                                System.err.println("Error en la linea: "+divleft+"no se le ha asignado un valor a esta variable");
                                                                                                            else
                                                                                                                if ((ambito2.equals(SymbolTable.profundidad))|| (ambito2.equals("main")) ||(ambito2.contains(SymbolTable.profundidad))){
                                                                                                                    RESULT = new Term(new Factor(Integer.parseInt(tmp.valor.toString())/Integer.parseInt(tmp2.valor.toString())));   
                                                                                                                }else{
                                                                                                                    System.err.println("Error en la linea: "+divleft+" ,variable no ha sido declarada");  
                                                                                                                }        
                                                                                                        }
                                                                                                        else{
                                                                                                            System.err.println("Error en la linea: "+divleft+" no se pueden sumar estos valores, se esperan dos enteros");
                                                                                                        }
                                                                                                    }
                                                                                                    else{
                                                                                                        System.err.println("Error en la linea: "+divleft+" no se pueden dividir estos valores, se esperan dos enteros");
                                                                                                    } 
                                                                                                }
                                                                                            }
                                                                                        }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // term ::= term TIMES factor 
            {
              Term RESULT =null;
		int termleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int termright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Term term = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int timleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int timright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object tim = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int factleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int factright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Factor fact = (Factor)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                                                    if(term.getFact().getType()==4){
                                                                                        if(fact.getType()==4){
                                                                                            RESULT = new Term(new Factor(Integer.parseInt(term.toString())*Integer.parseInt(fact.toString())));
                                                                                        }
                                                                                        else if(fact.getType()==1){
                                                                                            Simbolo tmp2 = null;
                                                                                            tmp2 = SymbolTable.buscar(term.toString());
                                                                                            if(tmp2==null){
                                                                                                System.err.println("Error en la linea: "+timleft+" la variable "+fact.toString()+" no existe");
                                                                                            }
                                                                                            else if(tmp2!=null&&tmp2.getTipo().equals("integer")){
                                                                                                String ambito = SymbolTable.verificarAmbito(tmp2.nombre);
                                                                                                if(tmp2.valor == null)
                                                                                                    System.err.println("Error en la linea: "+timleft+"no se le ha asignado un valor a esta variable");
                                                                                                else
                                                                                                    if ((ambito.equals(SymbolTable.profundidad))|| (ambito.equals("main")) ||(ambito.contains(SymbolTable.profundidad))){
                                                                                                        RESULT = new Term(new Factor(Integer.parseInt(term.toString())*Integer.parseInt(tmp2.valor.toString())));   
                                                                                                    }else{
                                                                                                        System.err.println("Error en la linea: "+timleft+" ,variable no ha sido declarada");  
                                                                                                    }   
                                                                                            }
                                                                                            else{
                                                                                               System.err.println("Error en la linea: "+timleft+" no se pueden sumar estos valores, se esperan dos enteros");
                                                                                            }
                                                                                        }
                                                                                        else{
                                                                                            System.err.println("Error en la linea: "+timleft+" no se pueden restar estos valores, se esperan dos enteros");
                                                                                        }
                                                                                    }
                                                                                    else if(term.getFact().getType()==1){
                                                                                        Simbolo tmp = null;
                                                                                        tmp = SymbolTable.buscar(term.toString());
                                                                                        if(tmp == null){
                                                                                            System.err.println("Error en la linea: "+timleft+" variable "+term.toString()+" no existe");
                                                                                        }
                                                                                        else if(tmp!=null){
                                                                                            if(tmp.valor == null)
                                                                                                System.err.println("Error en la linea: "+timleft+"no se le ha asignado un valor a esta variable");
                                                                                            else
                                                                                                if(tmp.getTipo().equals("integer")){
                                                                                                    String ambito = SymbolTable.verificarAmbito(tmp.nombre);
                                                                                                    if(fact.getType()==4){
                                                                                                        if ((ambito.equals(SymbolTable.profundidad))|| (ambito.equals("main")) ||(ambito.contains(SymbolTable.profundidad))){
                                                                                                            RESULT = new Term(new Factor(Integer.parseInt(tmp.valor.toString())*Integer.parseInt(fact.toString())));
                                                                                                        }else{
                                                                                                            System.err.println("Error en la linea: "+timleft+" ,variable no ha sido declarada");  
                                                                                                        } 
                                                                                                    }
                                                                                                    else if(fact.getType()==1){
                                                                                                        Simbolo tmp2 = null;
                                                                                                        tmp2 = SymbolTable.buscar(fact.toString());
                                                                                                        String ambito2 = SymbolTable.verificarAmbito(tmp2.nombre);
                                                                                                        if(tmp2==null){
                                                                                                            System.err.println("Error en la linea: "+timleft+" la variable "+fact.toString()+" no existe");
                                                                                                        }
                                                                                                        else if(tmp2!=null&&tmp2.getTipo().equals("integer")){
                                                                                                            if(tmp2.valor == null)
                                                                                                                System.err.println("Error en la linea: "+timleft+"no se le ha asignado un valor a esta variable");
                                                                                                            else
                                                                                                                if ((ambito2.equals(SymbolTable.profundidad))|| (ambito2.equals("main")) ||(ambito2.contains(SymbolTable.profundidad))){
                                                                                                                    RESULT = new Term(new Factor(Integer.parseInt(tmp.valor.toString())*Integer.parseInt(tmp2.valor.toString())));  
                                                                                                                }else{
                                                                                                                    System.err.println("Error en la linea: "+timleft+" ,variable no ha sido declarada");  
                                                                                                                }   
                                                                                                        }
                                                                                                        else{
                                                                                                            System.err.println("Error en la linea: "+timleft+" no se pueden sumar estos valores, se esperan dos enteros");
                                                                                                        }
                                                                                                    }
                                                                                                    else{
                                                                                                        System.err.println("Error en la linea: "+timleft+" no se pueden multiplicar estos valores, se esperan dos enteros");
                                                                                                    } 
                                                                                                }
                                                                                            }
                                                                                        }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // term ::= factor 
            {
              Term RESULT =null;
		int factleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int factright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Factor fact = (Factor)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Term(fact); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // sim_exp ::= MINUS term 
            {
              Simple_expression RESULT =null;
		int minleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int minright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object min = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int termleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int termright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Term term = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(term.getFact().getType()==4){
                                                                                    RESULT = new Simple_expression(new Term(new Factor(Integer.parseInt(term.toString())*-1)));
                                                                                }
                                                                                else if(term.getFact().getType()==1){
                                                                                    Simbolo tmp = null;
                                                                                    tmp = SymbolTable.buscar(term.toString());
                                                                                    if(tmp==null){
                                                                                        System.err.println("Error en la linea: "+minleft+" la variable" + term.toString()+" no existe");
                                                                                    }
                                                                                    else if(tmp != null&&tmp.getTipo().equals("integer")){
                                                                                        String ambito = SymbolTable.verificarAmbito(tmp.nombre);
                                                                                        if(tmp.valor == null)
                                                                                            System.err.println("Error en la linea: "+minleft+"no se le ha asignado un valor a esta variable");
                                                                                        else
                                                                                            if ((ambito.equals(SymbolTable.profundidad))|| (ambito.equals("main")) ||(ambito.contains(SymbolTable.profundidad))){
                                                                                                RESULT = new Simple_expression(new Term(new Factor(Integer.parseInt(tmp.valor.toString())*-1)));
                                                                                            }else{
                                                                                                System.err.println("Error en la linea: "+minleft+" ,variable no ha sido declarada");  
                                                                                            } 
                                                                                    }
                                                                                    else
                                                                                        System.err.println("Error en la linea: "+minleft+" tipo incompatible, se esperaba entero");
                                                                                }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sim_exp",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // sim_exp ::= PLUS term 
            {
              Simple_expression RESULT =null;
		int termleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int termright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Term term = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Simple_expression(term);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sim_exp",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // sim_exp ::= sim_exp MINUS term 
            {
              Simple_expression RESULT =null;
		int se1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int se1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Simple_expression se1 = (Simple_expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int minleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int minright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object min = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int termleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int termright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Term term = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                                                    if(se1.getTerm().getFact().getType()==4){
                                                                                        if(term.getFact().getType()==4){
                                                                                            RESULT = new Simple_expression(new Term(new Factor(Integer.parseInt(se1.toString())-Integer.parseInt(term.toString()))));
                                                                                        }
                                                                                        else if(term.getFact().getType()==1){
                                                                                            Simbolo tmp2 = null;
                                                                                            tmp2 = SymbolTable.buscar(term.toString());
                                                                                            String ambito = SymbolTable.verificarAmbito(tmp2.nombre);
                                                                                            if(tmp2==null){
                                                                                                System.err.println("Error en la linea: "+minleft+" la variable "+term.toString()+" no existe");
                                                                                            }
                                                                                            else if(tmp2!=null&&tmp2.getTipo().equals("integer")){
                                                                                                if(tmp2.valor == null)
                                                                                                    System.err.println("Error en la linea: "+minleft+"no se le ha asignado un valor a esta variable");
                                                                                                else
                                                                                                    if ((ambito.equals(SymbolTable.profundidad))|| (ambito.equals("main")) ||(ambito.contains(SymbolTable.profundidad))){
                                                                                                        RESULT = new Simple_expression(new Term(new Factor(Integer.parseInt(se1.toString())-Integer.parseInt(tmp2.valor.toString()))));   
                                                                                                    }else{
                                                                                                        System.err.println("Error en la linea: "+minleft+" ,variable no ha sido declarada");  
                                                                                                    }
                                                                                                      
                                                                                            }
                                                                                            else{
                                                                                                System.err.println("Error en la linea: "+minleft+" no se pueden sumar estos valores, se esperan dos chars");
                                                                                            }
                                                                                        }
                                                                                        else{
                                                                                            System.err.println("Error en la linea: "+minleft+" no se pueden restar estos valores, se esperan dos enteros");
                                                                                        }
                                                                                    }
                                                                                        else if(se1.getTerm().getFact().getType()==1){
                                                                                        Simbolo tmp = null;
                                                                                        tmp = SymbolTable.buscar(se1.toString());
                                                                                        if(tmp == null){
                                                                                            System.err.println("Error en la linea: "+minleft+" variable "+se1.toString()+" no existe");
                                                                                        }
                                                                                        else if(tmp!=null){
                                                                                            String ambito = SymbolTable.verificarAmbito(tmp.nombre);
                                                                                            if(tmp.valor == null)
                                                                                                System.err.println("Error en la linea: "+minleft+"no se le ha asignado un valor a esta variable");
                                                                                            else
                                                                                                if(tmp.getTipo().equals("integer")){
                                                                                                    if(term.getFact().getType()==4){
                                                                                                        if ((ambito.equals(SymbolTable.profundidad))|| (ambito.equals("main")) ||(ambito.contains(SymbolTable.profundidad))){
                                                                                                            RESULT = new Simple_expression(new Term(new Factor(Integer.parseInt(tmp.valor.toString())-Integer.parseInt(term.toString()))));
                                                                                                        }else{
                                                                                                            System.err.println("Error en la linea: "+minleft+" ,variable no ha sido declarada");  
                                                                                                        }
                                                                                                    }
                                                                                                    else if(term.getFact().getType()==1){
                                                                                                        Simbolo tmp2 = null;
                                                                                                        tmp2 = SymbolTable.buscar(term.toString());
                                                                                                        if(tmp2==null){
                                                                                                            System.err.println("Error en la linea: "+minleft+" la variable "+term.toString()+" no existe");
                                                                                                        }
                                                                                                        else if(tmp2!=null&&tmp2.getTipo().equals("integer")){
                                                                                                            String ambito2 = SymbolTable.verificarAmbito(tmp2.nombre);
                                                                                                            if(tmp2.valor == null)
                                                                                                                System.err.println("Error en la linea: "+minleft+"no se le ha asignado un valor a esta variable");
                                                                                                            else
                                                                                                                if ((ambito2.equals(SymbolTable.profundidad))|| (ambito2.equals("main")) ||(ambito2.contains(SymbolTable.profundidad))){
                                                                                                                    RESULT = new Simple_expression(new Term(new Factor(Integer.parseInt(tmp.valor.toString())-Integer.parseInt(tmp2.valor.toString())))); 
                                                                                                                }else{
                                                                                                                    System.err.println("Error en la linea: "+minleft+" ,variable no ha sido declarada");  
                                                                                                                } 
                                                                                                        }
                                                                                                        else{
                                                                                                            System.err.println("Error en la linea: "+minleft+" no se pueden sumar estos valores, se esperan dos enteros");
                                                                                                        }
                                                                                                    }
                                                                                                    else{
                                                                                                        System.err.println("Error en la linea: "+minleft+" no se pueden restar estos valores, se esperan dos enteros");
                                                                                                    } 
                                                                                                }
                                                                                            }
                                                                                        }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sim_exp",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // sim_exp ::= sim_exp PLUS term 
            {
              Simple_expression RESULT =null;
		int se1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int se1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Simple_expression se1 = (Simple_expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object pl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int termleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int termright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Term term = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                                                 if(se1.getTerm().getFact().getType()==4){
                                                                                        if(term.getFact().getType()==4){
                                                                                            RESULT = new Simple_expression(new Term(new Factor(Integer.parseInt(se1.toString())+Integer.parseInt(term.toString()))));
                                                                                        }
                                                                                        else if(term.getFact().getType()==1){
                                                                                            Simbolo tmp2 = null;
                                                                                            tmp2 = SymbolTable.buscar(term.toString());
                                                                                            if(tmp2==null){
                                                                                                System.err.println("Error en la linea: "+plleft+" la variable "+term.toString()+" no existe");
                                                                                            }
                                                                                            else if(tmp2!=null&&tmp2.getTipo().equals("integer")){
                                                                                                String ambito = SymbolTable.verificarAmbito(tmp2.nombre);
                                                                                                if(tmp2.valor == null)
                                                                                                    System.err.println("Error en la linea: "+plleft+" no se le ha asignado un valor a esta variable");
                                                                                                else
                                                                                                   if ((ambito.equals(SymbolTable.profundidad))|| (ambito.equals("main")) ||(ambito.contains(SymbolTable.profundidad))){
                                                                                                        RESULT = new Simple_expression(new Term(new Factor(Integer.parseInt(se1.toString())+Integer.parseInt(tmp2.valor.toString()))));   
                                                                                                    }else{
                                                                                                        System.err.println("Error en la linea: "+plleft+" ,variable no ha sido declarada");  
                                                                                                    }
                                                                                                }
                                                                                            else{
                                                                                                System.err.println("Error en la linea: "+plleft+" no se pueden sumar estos valores, se esperan dos chars");
                                                                                            }
                                                                                        }
                                                                                        else{
                                                                                            System.err.println("Error en la linea: "+plleft+" no se pueden sumar estos valores, se esperan dos enteros");
                                                                                        }
                                                                                    }
                                                                                    else if(se1.getTerm().getFact().getType()==2){
                                                                                        if(term.getFact().getType()==2){
                                                                                            RESULT = new Simple_expression(new Term(new Factor(se1.toString()+term.toString())));
                                                                                        }
                                                                                        else if(term.getFact().getType()==1){
                                                                                            Simbolo tmp2 = null;
                                                                                            tmp2 = SymbolTable.buscar(term.toString());
                                                                                            if(tmp2==null){
                                                                                                System.err.println("Error en la linea: "+plleft+" la variable "+term.toString()+" no existe");
                                                                                            }
                                                                                            else if(tmp2!=null&&tmp2.getTipo().equals("string")){
                                                                                                String ambito = SymbolTable.verificarAmbito(tmp2.nombre);
                                                                                                if(tmp2.valor == null)
                                                                                                    System.err.println("Error en la linea: "+plleft+"no se le ha asignado un valor a esta variable");
                                                                                                else
                                                                                                    if ((ambito.equals(SymbolTable.profundidad))|| (ambito.equals("main")) ||(ambito.contains(SymbolTable.profundidad))){
                                                                                                        RESULT = new Simple_expression(new Term(new Factor(se1.toString()+tmp2.valor.toString())));  
                                                                                                    }else{
                                                                                                        System.err.println("Error en la linea: "+plleft+" ,variable no ha sido declarada");  
                                                                                                    } 
                                                                                            }
                                                                                            else{
                                                                                                System.err.println("Error en la linea: "+plleft+" no se pueden sumar estos valores, se esperan dos cadenas");
                                                                                            }
                                                                                        }
                                                                                        else{
                                                                                            System.err.println("Error en la linea: "+plleft+" no se pueden sumar estos valores, se esperan dos cadenas");
                                                                                        }                                                             
                                                                                    }
                                                                                    else if(se1.getTerm().getFact().getType()==3){
                                                                                        if(term.getFact().getType()==3){
                                                                                            RESULT = new Simple_expression(new Term(new Factor(se1.toString()+term.toString())));
                                                                                        }
                                                                                        else if(term.getFact().getType()==1){
                                                                                            Simbolo tmp2 = null;
                                                                                            tmp2 = SymbolTable.buscar(term.toString());
                                                                                            if(tmp2==null){
                                                                                                System.err.println("Error en la linea: "+plleft+" la variable "+term.toString()+" no existe");
                                                                                            }
                                                                                            else if(tmp2!=null&&tmp2.getTipo().equals("char")){
                                                                                                String ambito = SymbolTable.verificarAmbito(tmp2.nombre);
                                                                                                if(tmp2.valor == null)
                                                                                                    System.err.println("Error en la linea: "+plleft+"no se le ha asignado un valor a esta variable");
                                                                                                else
                                                                                                    if ((ambito.equals(SymbolTable.profundidad))|| (ambito.equals("main")) ||(ambito.contains(SymbolTable.profundidad))){
                                                                                                        RESULT = new Simple_expression(new Term(new Factor(se1.toString()+tmp2.valor.toString())));   
                                                                                                    }else{
                                                                                                        System.err.println("Error en la linea: "+plleft+" ,variable no ha sido declarada");  
                                                                                                    }
                                                                                            }
                                                                                            else{
                                                                                                System.err.println("Error en la linea: "+plleft+" no se pueden sumar estos valores, se esperan dos chars");
                                                                                            }
                                                                                        }
                                                                                        else{
                                                                                            System.err.println("Error en la linea: "+plleft+" no se pueden sumar estos valores, se esperan dos chars");
                                                                                        }
                                                                                    }
                                                                                    else if(se1.getTerm().getFact().getType()==1){
                                                                                        Simbolo tmp = null;
                                                                                        tmp = SymbolTable.buscar(se1.toString());
                                                                                        if(tmp == null){
                                                                                            System.err.println("Error en la linea: "+plleft+" variable "+se1.toString()+" no existe");
                                                                                        }
                                                                                        else if(tmp!=null){
                                                                                            String ambito = SymbolTable.verificarAmbito(tmp.nombre);
                                                                                            if(tmp.valor == null)
                                                                                                    System.err.println("Error en la linea: "+plleft+"no se le ha asignado un valor a esta variable");
                                                                                            else
                                                                                                if(tmp.getTipo().equals("integer")){
                                                                                                    if ((ambito.equals(SymbolTable.profundidad))|| (ambito.equals("main")) ||(ambito.contains(SymbolTable.profundidad))){
                                                                                                        if(term.getFact().getType()==4){
                                                                                                            RESULT = new Simple_expression(new Term(new Factor(Integer.parseInt(tmp.valor.toString())+Integer.parseInt(term.toString()))));
                                                                                                        }
                                                                                                        else if(term.getFact().getType()==1){
                                                                                                            Simbolo tmp2 = null;
                                                                                                            tmp2 = SymbolTable.buscar(term.toString());
                                                                                                            if(tmp2==null){
                                                                                                                System.err.println("Error en la linea: "+plleft+" la variable "+term.toString()+" no existe");
                                                                                                            }
                                                                                                            else if(tmp2!=null&&tmp2.getTipo().equals("integer")){
                                                                                                                String ambito2 = SymbolTable.verificarAmbito(tmp2.nombre);
                                                                                                                if(tmp2.valor == null)
                                                                                                                    System.err.println("Error en la linea: "+plleft+"no se le ha asignado un valor a esta variable");
                                                                                                                else
                                                                                                                    if ((ambito2.equals(SymbolTable.profundidad))|| (ambito2.equals("main")) ||(ambito2.contains(SymbolTable.profundidad))){
                                                                                                                        RESULT = new Simple_expression(new Term(new Factor(Integer.parseInt(tmp.valor.toString())+Integer.parseInt(tmp2.valor.toString())))); 
                                                                                                                    }else{
                                                                                                                        System.err.println("Error en la linea: "+plleft+" ,variable no ha sido declarada");  
                                                                                                                    }
                                                                                                            }
                                                                                                            else{
                                                                                                                System.err.println("Error en la linea: "+plleft+" no se pueden sumar estos valores, se esperan dos chars");
                                                                                                            }
                                                                                                        }
                                                                                                        else{
                                                                                                            System.err.println("Error en la linea: "+plleft+" no se pueden sumar estos valores, se esperan dos enteros");
                                                                                                        }
                                                                                                    }else{
                                                                                                        System.err.println("Error en la linea: "+plleft+" ,variable no ha sido declarada");  
                                                                                                    }
                                                                                                }
                                                                                                else if(tmp.getTipo().equals("string")){
                                                                                                    if ((ambito.equals(SymbolTable.profundidad))|| (ambito.equals("main")) ||(ambito.contains(SymbolTable.profundidad))){
                                                                                                        if(term.getFact().getType()==2){
                                                                                                            RESULT = new Simple_expression(new Term(new Factor(tmp.valor.toString()+term.toString())));
                                                                                                        }
                                                                                                        else if(term.getFact().getType()==1){
                                                                                                            Simbolo tmp2 = null;
                                                                                                            tmp2 = SymbolTable.buscar(term.toString());
                                                                                                            if(tmp2==null){
                                                                                                                System.err.println("Error en la linea: "+plleft+" la variable "+term.toString()+" no existe");
                                                                                                            }
                                                                                                            else if(tmp2!=null&&tmp2.getTipo().equals("string")){
                                                                                                                String ambito2 = SymbolTable.verificarAmbito(tmp2.nombre);
                                                                                                                if(tmp2.valor == null)
                                                                                                                    System.err.println("Error en la linea: "+plleft+"no se le ha asignado un valor a esta variable");
                                                                                                                else
                                                                                                                    if ((ambito2.equals(SymbolTable.profundidad))|| (ambito2.equals("main")) ||(ambito2.contains(SymbolTable.profundidad))){
                                                                                                                        RESULT = new Simple_expression(new Term(new Factor(tmp.valor.toString()+tmp2.valor.toString())));   
                                                                                                                    }else{
                                                                                                                        System.err.println("Error en la linea: "+plleft+" ,variable no ha sido declarada");  
                                                                                                                    }
                                                                                                            }
                                                                                                            else{
                                                                                                               System.err.println("Error en la linea: "+plleft+" no se pueden sumar estos valores, se esperan dos chars");
                                                                                                            }
                                                                                                        }
                                                                                                        else{
                                                                                                            System.err.println("Error en la linea: "+plleft+" no se pueden sumar estos valores, se esperan dos cadenas");
                                                                                                        }
                                                                                                    }else{
                                                                                                        System.err.println("Error en la linea: "+plleft+" ,variable no ha sido declarada");  
                                                                                                    }
                                                                                                }
                                                                                                else if(tmp.getTipo().equals("char")){
                                                                                                    if ((ambito.equals(SymbolTable.profundidad))|| (ambito.equals("main")) ||(ambito.contains(SymbolTable.profundidad))){
                                                                                                        if(term.getFact().getType()==3){
                                                                                                            RESULT = new Simple_expression(new Term(new Factor(tmp.valor.toString()+term.toString())));
                                                                                                        }
                                                                                                        else if(term.getFact().getType()==1){
                                                                                                            Simbolo tmp2 = null;
                                                                                                            tmp2 = SymbolTable.buscar(term.toString());
                                                                                                            if(tmp2==null){
                                                                                                                System.err.println("Error en la linea: "+plleft+" la variable "+term.toString()+" no existe");
                                                                                                            }
                                                                                                            else if(tmp2!=null&&tmp2.getTipo().equals("char")){
                                                                                                                String ambito2 = SymbolTable.verificarAmbito(tmp2.nombre);
                                                                                                                if(tmp2.valor == null)
                                                                                                                    System.err.println("Error en la linea: "+plleft+"no se le ha asignado un valor a esta variable");
                                                                                                                else
                                                                                                                    if ((ambito2.equals(SymbolTable.profundidad))|| (ambito2.equals("main")) ||(ambito2.contains(SymbolTable.profundidad))){
                                                                                                                        RESULT = new Simple_expression(new Term(new Factor(tmp.valor.toString()+tmp2.valor.toString())));   
                                                                                                                    }else{
                                                                                                                        System.err.println("Error en la linea: "+plleft+" ,variable no ha sido declarada");  
                                                                                                                    }
                                                                                                            }
                                                                                                            else{
                                                                                                               System.err.println("Error en la linea: "+plleft+" no se pueden sumar estos valores, se esperan dos chars");
                                                                                                            }
                                                                                                        }
                                                                                                        else{
                                                                                                            System.err.println("Error en la linea: "+plleft+" no se pueden sumar estos valores, se esperan dos chars");
                                                                                                        }
                                                                                                    }else{
                                                                                                        System.err.println("Error en la linea: "+plleft+" ,variable no ha sido declarada");  
                                                                                                    }
                                                                                                }
                                                                                        }
                                                                                    }
                                                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sim_exp",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // sim_exp ::= term 
            {
              Simple_expression RESULT =null;
		int termleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int termright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Term term = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Simple_expression(term); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sim_exp",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // exp ::= error 
            {
              Expression RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // exp ::= sim_exp GREATER sim_exp 
            {
              Expression RESULT =null;
		int se1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int se1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Simple_expression se1 = (Simple_expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int se2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int se2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Simple_expression se2 = (Simple_expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Greater(se1,se2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // exp ::= sim_exp GREATEREQ sim_exp 
            {
              Expression RESULT =null;
		int se1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int se1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Simple_expression se1 = (Simple_expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int se2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int se2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Simple_expression se2 = (Simple_expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new GreaterE(se1,se2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // exp ::= sim_exp LESSEQ sim_exp 
            {
              Expression RESULT =null;
		int se1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int se1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Simple_expression se1 = (Simple_expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int se2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int se2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Simple_expression se2 = (Simple_expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LessE(se1,se2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // exp ::= sim_exp LESS sim_exp 
            {
              Expression RESULT =null;
		int se1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int se1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Simple_expression se1 = (Simple_expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int se2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int se2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Simple_expression se2 = (Simple_expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Less(se1,se2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // exp ::= sim_exp NEQ sim_exp 
            {
              Expression RESULT =null;
		int se1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int se1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Simple_expression se1 = (Simple_expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int se2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int se2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Simple_expression se2 = (Simple_expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nequal(se1,se2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // exp ::= sim_exp EQU sim_exp 
            {
              Expression RESULT =null;
		int se1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int se1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Simple_expression se1 = (Simple_expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int se2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int se2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Simple_expression se2 = (Simple_expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Equal(se1,se2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // exp ::= sim_exp 
            {
              Expression RESULT =null;
		int simeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int simeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Simple_expression sime = (Simple_expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =  new Expression(sime); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // repeat_stament ::= REPEAT staments error exp 
            {
              Repeat_stament RESULT =null;
		int stsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int stsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Staments sts = (Staments)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression ex = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.err.println(" reserved word UNTIL expected"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("repeat_stament",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // repeat_stament ::= REPEAT staments UNTIL exp 
            {
              Repeat_stament RESULT =null;
		int stsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int stsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Staments sts = (Staments)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression ex = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Repeat_stament(sts,ex); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("repeat_stament",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // for_stament ::= FOR ID ASSIGN NUMBER TO NUMBER error c_stament 
            {
              For_stament RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Integer m = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int stsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Compound_stament sts = (Compound_stament)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.err.println(" reserved word DO expected"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_stament",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // for_stament ::= FOR ID ASSIGN NUMBER error NUMBER DO c_stament 
            {
              For_stament RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Integer m = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int stsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Compound_stament sts = (Compound_stament)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.err.println(" reserved word TO expected"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_stament",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // for_stament ::= FOR ID error NUMBER TO NUMBER DO c_stament 
            {
              For_stament RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Integer m = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int stsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Compound_stament sts = (Compound_stament)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.err.println(" =: expected"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_stament",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // for_stament ::= FOR ID ASSIGN NUMBER TO NUMBER DO c_stament 
            {
              For_stament RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Integer m = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int stsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Compound_stament sts = (Compound_stament)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new For_stament(new Parameter(id,m),n,sts); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_stament",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // while_stament ::= WHILE exp error stament 
            {
              While_stament RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression ex = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stament st = (Stament)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.err.println(" reserved word DO expected"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_stament",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // while_stament ::= WHILE exp DO stament 
            {
              While_stament RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression ex = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stament st = (Stament)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new While_stament(ex,st); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_stament",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // if_stament ::= IF exp THEN stament ELSE stament 
            {
              If_stament RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expression ex = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int st1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int st1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Stament st1 = (Stament)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int st2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int st2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stament st2 = (Stament)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new If_stament(ex,st1,st2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stament",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // if_stament ::= IF exp error stament 
            {
              If_stament RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression ex = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stament st = (Stament)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.err.println(" reserved word THEN expected"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stament",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // if_stament ::= IF exp THEN stament 
            {
              If_stament RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression ex = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stament st = (Stament)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new If_stament(ex,st); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stament",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // struct_stament ::= repeat_stament 
            {
              Structured_stament RESULT =null;
		int r_stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int r_stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Repeat_stament r_st = (Repeat_stament)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Structured_stament(r_st); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("struct_stament",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // struct_stament ::= for_stament 
            {
              Structured_stament RESULT =null;
		int f_stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int f_stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		For_stament f_st = (For_stament)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Structured_stament(f_st); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("struct_stament",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // struct_stament ::= while_stament 
            {
              Structured_stament RESULT =null;
		int w_stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int w_stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		While_stament w_st = (While_stament)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Structured_stament(w_st); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("struct_stament",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // struct_stament ::= if_stament 
            {
              Structured_stament RESULT =null;
		int if_stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int if_stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		If_stament if_st = (If_stament)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Structured_stament(if_st); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("struct_stament",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // struct_stament ::= c_stament 
            {
              Structured_stament RESULT =null;
		int c_stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c_stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Compound_stament c_st = (Compound_stament)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Structured_stament(c_st); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("struct_stament",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // output_val ::= exp 
            {
              Output_value RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression ex = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Output_value(ex); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("output_val",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // writes ::= output_val 
            {
              Writes RESULT =null;
		int ovleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ovright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Output_value ov = (Output_value)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Writes(); RESULT.add(ov); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("writes",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // writes ::= output_val COMMA writes 
            {
              Writes RESULT =null;
		int ovleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ovright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Output_value ov = (Output_value)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int wrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Writes wr = (Writes)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 wr.add(ov); RESULT = wr; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("writes",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // write_s ::= WRITE LPAREN writes error 
            {
              Write_stament RESULT =null;
		int wrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int wrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Writes wr = (Writes)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.err.println(" ) expected"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("write_s",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // write_s ::= WRITE error writes RPAREN 
            {
              Write_stament RESULT =null;
		int wrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int wrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Writes wr = (Writes)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.err.println(" ( expected"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("write_s",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // write_s ::= WRITE LPAREN writes RPAREN 
            {
              Write_stament RESULT =null;
		int wrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int wrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Writes wr = (Writes)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Write_stament(wr); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("write_s",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // input_var ::= var 
            {
              Input_variable RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Input_variable(v); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("input_var",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // read_s ::= READ LPAREN input_var error 
            {
              Read_stament RESULT =null;
		int i_vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int i_vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Input_variable i_v = (Input_variable)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.err.println(" ) expected"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("read_s",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // read_s ::= READ error input_var RPAREN 
            {
              Read_stament RESULT =null;
		int i_vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int i_vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Input_variable i_v = (Input_variable)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.err.println(" ( expected"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("read_s",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // read_s ::= READ LPAREN input_var RPAREN 
            {
              Read_stament RESULT =null;
		int i_vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int i_vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Input_variable i_v = (Input_variable)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Read_stament(i_v); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("read_s",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // proc_id ::= ID 
            {
              Procedure_iden RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Procedure_iden(id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc_id",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // proc_s ::= proc_id 
            {
              Procedure_stament RESULT =null;
		int p_idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Procedure_iden p_id = (Procedure_iden)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Procedure_stament(p_id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc_s",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // assign_s ::= var ASSIGN exp 
            {
              Assign_stament RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object as = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression ex = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Assign_stament(v,ex); 
                                                                                Simbolo tmp = null;
                                                                                Simbolo tmp2 = null;
                                                                                tmp = SymbolTable.buscar(v.toString());
                                                                                tmp2 = SymbolTable.buscar(ex.toString());
                                                                                if(tmp == null){
                                                                                    System.err.println("Error en la linea: "+asleft+" variable " +v.toString()+ " no existe");
                                                                                } 
                                                                                else if(tmp!=null){
                                                                                    String ambito1 = SymbolTable.verificarAmbito(tmp.nombre);
                                                                                    if(tmp.valor == null){                                                                                       
                                                                                        String tipoVariable = SymbolTable.verificarTipo(tmp.nombre);
                                                                                        if(tipoVariable.equals("integer")&&tmp2==null){
                                                                                            if(ex.getS_exp1()!=null){
                                                                                                if (ex.getS_exp1().getTerm().getFact().getType()==4)
                                                                                                    if ((ambito1.equals(SymbolTable.profundidad)) ||
                                                                                                       (ambito1.equals("main") && !SymbolTable.profundidad.equals("main")) || (ambito1.contains(SymbolTable.profundidad))||ambito1.equals("function")){
                                                                                                            SymbolTable.insertar(v.toString(),ex);
                                                                                                    }else{
                                                                                                        System.err.println("Error en la linea: "+asleft+" ,variable no ha sido declarada");
                                                                                                    }
                                                                                                else
                                                                                                        System.err.println("Error en la linea: "+asleft+" tipo de asignacion incompatible, se esperaba un integer");
                                                                                            }
                                                                                        }
                                                                                        else if (tipoVariable.equals("string")&&tmp2==null){
                                                                                            if(ex.getS_exp1()!=null){
                                                                                                if(ex.getS_exp1().getTerm().getFact().getType()==2)
                                                                                                    if ((ambito1.equals(SymbolTable.profundidad)) ||
                                                                                                       (ambito1.equals("main") && !SymbolTable.profundidad.equals("main")) || (ambito1.contains(SymbolTable.profundidad))||ambito1.equals("function")){
                                                                                                            SymbolTable.insertar(v.toString(),ex);
                                                                                                    }else{
                                                                                                        System.err.println("Error en la linea: "+asleft+" ,variable no ha sido declarada");
                                                                                                    }
                                                                                                else
                                                                                                    System.err.println("Error en la linea: "+asleft+"Tipo de asignacion incompatible, se esperaba una String.");
                                                                                            }
                                                                                        }
                                                                                        else if (tipoVariable.equals("char")&&tmp2==null){
                                                                                            if(ex.getS_exp1()!= null){
                                                                                                if(ex.getS_exp1().getTerm().getFact().getType()==3)
                                                                                                    if ((ambito1.equals(SymbolTable.profundidad)) ||
                                                                                                       (ambito1.equals("main") && !SymbolTable.profundidad.equals("main")) || (ambito1.contains(SymbolTable.profundidad))||ambito1.equals("function")){
                                                                                                            SymbolTable.insertar(v.toString(),ex);
                                                                                                    }else{
                                                                                                        System.err.println("Error en la linea: "+asleft+" ,variable no ha sido declarada");
                                                                                                    }
                                                                                                else
                                                                                                    System.err.println("Error en la linea: "+asleft+" tipo de asignacion incompatible, se esperaba un char.");
                                                                                            }
                                                                                        }
                                                                                        else if(tmp2!=null){
                                                                                            String ambito2 = SymbolTable.verificarAmbito(tmp2.nombre);
                                                                                            if(ex.getS_exp1()!=null){
                                                                                                if(ex.getS_exp1().getTerm().getFact().getType()==1){
                                                                                                    if(tipoVariable.equals(SymbolTable.verificarTipo(ex.getS_exp1().getTerm().getFact().getVar().toString())))
                                                                                                        if(((ambito1.equals("main") && ambito2.equals("main")) && ((SymbolTable.profundidad.equals("main")) ||(!SymbolTable.profundidad.equals("main")))) 
                                                                                                        || ((ambito1.equals("main") && !ambito2.equals("main")) && ((ambito2.equals(SymbolTable.profundidad)) || ambito2.contains(SymbolTable.profundidad)))
                                                                                                        || ((!ambito1.equals("main")) && ((ambito1.equals(SymbolTable.profundidad)) || ambito1.contains(SymbolTable.profundidad)) 
                                                                                                        && ((ambito2.equals("main")) || (ambito2.contains(ambito1)) || (ambito2.equals(ambito1))))||ambito1.equals("function")){
                                                                                                            SymbolTable.insertar(v.toString(), SymbolTable.verificarValor(ex.getS_exp1().getTerm().getFact().getVar().toString()));
                                                                                                        }else{
                                                                                                           System.err.println("Error en la linea: "+asleft+" ,variable no ha sido declarada");   
                                                                                                        }
                                                                                                    else
                                                                                                        System.err.println("Error en la linea: "+asleft+" tipo de asignacion incompatible");
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }else if(tmp.valor != null){
                                                                                        String tipoVariable = SymbolTable.verificarTipo(tmp.nombre);
                                                                                        if(tipoVariable.equals("integer")&&tmp2==null){
                                                                                            if(ex.getS_exp1().getTerm().getFact().getType()== 4)
                                                                                                if ((ambito1.equals(SymbolTable.profundidad)) ||
                                                                                                       (ambito1.equals("main") && !SymbolTable.profundidad.equals("main")) || (ambito1.contains(SymbolTable.profundidad))||ambito1.equals("function")){
                                                                                                            SymbolTable.insertar(v.toString(),ex);
                                                                                                    }else{
                                                                                                        System.err.println("Error en la linea: "+asleft+" ,variable no ha sido declarada");
                                                                                                    }
                                                                                            else
                                                                                                System.err.println("Error en la linea: "+asleft+" tipo de asignacion incompatible, se esperaba un integer");
                                                                                        }
                                                                                        else if (tipoVariable.equals("string")&&tmp2==null){
                                                                                            if(ex.getS_exp1().getTerm().getFact().getType()==2)
                                                                                                if ((ambito1.equals(SymbolTable.profundidad)) ||
                                                                                                       (ambito1.equals("main") && !SymbolTable.profundidad.equals("main")) || (ambito1.contains(SymbolTable.profundidad))||ambito1.equals("function")){
                                                                                                            SymbolTable.insertar(v.toString(),ex);
                                                                                                    }else{
                                                                                                        System.err.println("Error en la linea: "+asleft+" ,variable no ha sido declarada");
                                                                                                    }
                                                                                            else
                                                                                                System.err.println("Error en la linea: "+asleft+" tipo de asignacion incompatible, se esperaba una String");
                                                                                        }
                                                                                        else if (tipoVariable.equals("char")&&tmp2==null){
                                                                                            if(ex.getS_exp1().getTerm().getFact().getType()==3)
                                                                                                if ((ambito1.equals(SymbolTable.profundidad)) ||
                                                                                                       (ambito1.equals("main") && !SymbolTable.profundidad.equals("main")) || (ambito1.contains(SymbolTable.profundidad))||ambito1.equals("function")){
                                                                                                            SymbolTable.insertar(v.toString(),ex);
                                                                                                    }else{
                                                                                                        System.err.println("Error en la linea: "+asleft+" ,variable no ha sido declarada");
                                                                                                    }
                                                                                            else
                                                                                                System.err.println("Error en la linea: "+asleft+" tipo de asignacion incompatible, se esperaba un char");
                                                                                        }
                                                                                        else if(tmp2!=null){
                                                                                            String ambito2 = SymbolTable.verificarAmbito(tmp2.nombre);
                                                                                            if(ex.getS_exp1().getTerm().getFact().getType()==1||ex.getS_exp1().getTerm().getFact().getType()==5){
                                                                                                if(tipoVariable.equals(SymbolTable.verificarTipo(ex.getS_exp1().getTerm().getFact().getVar().toString())))
                                                                                                    if(((ambito1.equals("main") && ambito2.equals("main")) && ((SymbolTable.profundidad.equals("main")) ||(!SymbolTable.profundidad.equals("main")))) 
                                                                                                        || ((ambito1.equals("main") && !ambito2.equals("main")) && ((ambito2.equals(SymbolTable.profundidad)) || ambito2.contains(SymbolTable.profundidad)))
                                                                                                        || ((!ambito1.equals("main")) && ((ambito1.equals(SymbolTable.profundidad)) || ambito1.contains(SymbolTable.profundidad)) 
                                                                                                        && ((ambito2.equals("main")) || (ambito2.contains(ambito1)) || (ambito2.equals(ambito1))))||ambito1.equals("function")||ambito2.equals("function")){
                                                                                                            SymbolTable.insertar(v.toString(), SymbolTable.verificarValor(ex.getS_exp1().getTerm().getFact().getVar().toString()));
                                                                                                        }else{
                                                                                                           System.err.println("Error en la linea: "+asleft+" ,variable no ha sido declarada");   
                                                                                                        }
                                                                                                else
                                                                                                    System.err.println("Error en la linea: "+asleft+" tipo de asignacion incompatible");
                                                                                                
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_s",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // sim_stament ::= write_s 
            {
              Simple_stament RESULT =null;
		int w_sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int w_sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Write_stament w_s = (Write_stament)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Simple_stament(w_s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sim_stament",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // sim_stament ::= read_s 
            {
              Simple_stament RESULT =null;
		int r_sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int r_sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Read_stament r_s = (Read_stament)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Simple_stament(r_s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sim_stament",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // sim_stament ::= proc_s 
            {
              Simple_stament RESULT =null;
		int p_sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Procedure_stament p_s = (Procedure_stament)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Simple_stament(p_s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sim_stament",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // sim_stament ::= assign_s 
            {
              Simple_stament RESULT =null;
		int as_sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int as_sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Assign_stament as_s = (Assign_stament)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Simple_stament(as_s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sim_stament",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // stament ::= struct_stament 
            {
              Stament RESULT =null;
		int st_stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int st_stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Structured_stament st_st = (Structured_stament)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Stament(st_st); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stament",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // stament ::= sim_stament 
            {
              Stament RESULT =null;
		int sim_stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sim_stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Simple_stament sim_st = (Simple_stament)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Stament(sim_st); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stament",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // staments ::= stament error 
            {
              Staments RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Stament st = (Stament)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.err.println(" ; expected"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("staments",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // staments ::= stament SEMICOLON 
            {
              Staments RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Stament st = (Stament)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Staments(); RESULT.add(st); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("staments",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // staments ::= stament error staments 
            {
              Staments RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Stament st = (Stament)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int stsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Staments sts = (Staments)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.err.println(" ; expected"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("staments",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // staments ::= stament SEMICOLON staments 
            {
              Staments RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Stament st = (Stament)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int stsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Staments sts = (Staments)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		sts.add(st); RESULT = sts; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("staments",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // c_stament ::= BEGIN END 
            {
              Compound_stament RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("c_stament",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // c_stament ::= BEGIN staments END 
            {
              Compound_stament RESULT =null;
		int stsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Staments sts = (Staments)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Compound_stament(sts); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("c_stament",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // t_id ::= error 
            {
              Type_ident RESULT =null;
		 System.err.println("Type Expected"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("t_id",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // t_id ::= STRING 
            {
              Type_ident RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Type_ident("string");
                                                                                 //System.out.println(RESULT.getIdent());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("t_id",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // t_id ::= BOOLEAN 
            {
              Type_ident RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Type_ident("boolean");
                                                                                 //System.out.println(RESULT.getIdent());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("t_id",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // t_id ::= CHAR 
            {
              Type_ident RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Type_ident("char");
                                                                                 //System.out.println(RESULT.getIdent());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("t_id",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // t_id ::= INTEGER 
            {
              Type_ident RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Type_ident("integer");
                                                                                 //System.out.println(RESULT.getIdent());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("t_id",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // simple_t ::= t_id 
            {
              Simple_type RESULT =null;
		int tidleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tidright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Type_ident tid = (Type_ident)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Simple_type (tid);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_t",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // index_r ::= NUMBER DOT DOT error 
            {
              Index_range RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer n1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 System.err.println(" number expected"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("index_r",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // index_r ::= error DOT DOT NUMBER 
            {
              Index_range RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer n2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.err.println(" number expected"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("index_r",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // index_r ::= NUMBER error DOT NUMBER 
            {
              Index_range RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer n1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer n2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.err.println(" . expected"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("index_r",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // index_r ::= NUMBER DOT DOT NUMBER 
            {
              Index_range RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer n1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer n2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Index_range(n1,n2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("index_r",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // array_t ::= ARRAY LCOR index_r RCOR error simple_t 
            {
              Array_type RESULT =null;
		int ind_rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int ind_rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Index_range ind_r = (Index_range)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sim_tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sim_tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Simple_type sim_t = (Simple_type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.err.println(" reserved word FOR expected."); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_t",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // array_t ::= ARRAY LCOR index_r error OF simple_t 
            {
              Array_type RESULT =null;
		int ind_rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int ind_rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Index_range ind_r = (Index_range)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sim_tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sim_tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Simple_type sim_t = (Simple_type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.err.println(" ] expected"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_t",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // array_t ::= ARRAY error index_r RCOR OF simple_t 
            {
              Array_type RESULT =null;
		int ind_rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int ind_rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Index_range ind_r = (Index_range)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sim_tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sim_tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Simple_type sim_t = (Simple_type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.err.println(" [ expected"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_t",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // array_t ::= ARRAY LCOR index_r RCOR OF simple_t 
            {
              Array_type RESULT =null;
		int ind_rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int ind_rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Index_range ind_r = (Index_range)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sim_tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sim_tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Simple_type sim_t = (Simple_type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Array_type(ind_r,sim_t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_t",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // type ::= array_t 
            {
              Type RESULT =null;
		int atleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int atright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Array_type at = (Array_type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Type(at); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // type ::= simple_t 
            {
              Type RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Simple_type st = (Simple_type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Type(st);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // parameters ::= ID COLON type 
            {
              Parameters RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Type tipo = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Parameters(id,tipo);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // parameters ::= ID error type COMMA parameters 
            {
              Parameters RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type tipo = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pmsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pmsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Parameters pms = (Parameters)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.err.println(" , expected"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // parameters ::= ID COLON type COMMA parameters 
            {
              Parameters RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type tipo = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pmsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pmsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Parameters pms = (Parameters)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 pms.add(new Parameter(id,tipo)); RESULT = pms; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // p_dec ::= FUNCTION ID LPAREN parameters RPAREN COLON type error 
            {
              Procedure_d RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Parameters p = (Parameters)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type tipo = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.err.println(" ; expected"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("p_dec",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // p_dec ::= FUNCTION ID LPAREN parameters RPAREN error type SEMICOLON 
            {
              Procedure_d RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Parameters p = (Parameters)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type tipo = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.err.println(" : expected"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("p_dec",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // p_dec ::= FUNCTION ID LPAREN parameters error COLON type SEMICOLON 
            {
              Procedure_d RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Parameters p = (Parameters)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type tipo = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.err.println(" RPAREN expected"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("p_dec",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // p_dec ::= FUNCTION ID error parameters RPAREN COLON type SEMICOLON 
            {
              Procedure_d RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Parameters p = (Parameters)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type tipo = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.err.println(" LPAREN expected"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("p_dec",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // p_dec ::= FUNCTION ID LPAREN parameters RPAREN COLON type SEMICOLON 
            {
              Procedure_d RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Parameters p = (Parameters)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type tipo = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Procedure_d (id,tipo,p);
                                                                                for(int i=0;i<p.getParametros().size();i++){
                                                                                    SymbolTable.crear(p.getParametros().get(i).getId(), p.getParametros().get(i).getTipo().toString(), id + "_Param");
                                                                                    //System.out.println("parametros " + p.getParametros().get(i).getId());
                                                                                }
                                                                                SymbolTable.crear(id, tipo.toString(), "function");
                                                                                //SymbolTable.insertar(id, p.getParametros());
                                                                                SymbolTable.profundidad=id;
                                                                                SymbolTable.UltimaFuncion=id;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("p_dec",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // p_dec ::= FUNCTION ID error type 
            {
              Procedure_d RESULT =null;
		 System.err.println(" : expected"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("p_dec",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // p_dec ::= FUNCTION ID COLON type 
            {
              Procedure_d RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Type tipo = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Procedure_d(id,tipo); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("p_dec",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // proc_dec ::= p_dec block_p error 
            {
              Procedure_dec RESULT =null;
		int pdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Procedure_d pd = (Procedure_d)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int blleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int blright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Block_p bl = (Block_p)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.err.println(" ; expected"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc_dec",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // proc_dec ::= p_dec block_p SEMICOLON 
            {
              Procedure_dec RESULT =null;
		int pdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Procedure_d pd = (Procedure_d)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int blleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int blright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Block_p bl = (Block_p)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Procedure_dec(pd,bl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc_dec",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // p_d_p ::= 
            {
              Procedure_dec_part RESULT =null;
		 RESULT = new Procedure_dec_part(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("p_d_p",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // p_d_p ::= proc_dec p_d_p 
            {
              Procedure_dec_part RESULT =null;
		int pdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Procedure_dec pd = (Procedure_dec)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pdpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pdpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Procedure_dec_part pdp = (Procedure_dec_part)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 pdp.add(pd); RESULT= pdp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("p_d_p",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // v_dec ::= ID COLON type 
            {
              Variable_d RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Type tipo = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Variable_d(id,tipo); 
                                                                                SymbolTable.crear(id, tipo.toString(),SymbolTable.UltimaFuncion);
                                                                               
                                                                                //System.out.println("ULTIMA FUNCION EN V_DEC " + SymbolTable.UltimaFuncion);
                                                                                
                                                                                //System.out.println();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("v_dec",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // v_dec ::= ID error v_dec 
            {
              Variable_d RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Variable_d vd = (Variable_d)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.err.println(" , or : expected"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("v_dec",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // v_dec ::= ID COMMA v_dec 
            {
              Variable_d RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Variable_d vd = (Variable_d)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 vd.add(id); RESULT = vd; 
                                                                                SymbolTable.crear(id,null,SymbolTable.UltimaFuncion);
                                                                                SymbolTable.agregarTipo(id, SymbolTable.UltimaFuncion);
                                                                             
                                                                                //System.out.println("ULTIMA FUNCION EN V_DEC " + SymbolTable.UltimaFuncion);
                                                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("v_dec",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // var_dec ::= v_dec error var_dec 
            {
              Variable_dec RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Variable_d vd = (Variable_d)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int var_dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var_dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Variable_dec var_d = (Variable_dec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.err.println(" ; expected"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_dec",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // var_dec ::= 
            {
              Variable_dec RESULT =null;
		 RESULT = new Variable_dec(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_dec",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // var_dec ::= v_dec SEMICOLON var_dec 
            {
              Variable_dec RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Variable_d vd = (Variable_d)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int var_dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var_dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Variable_dec var_d = (Variable_dec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 var_d.add(vd); RESULT = var_d; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_dec",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // v_d_p ::= error var_dec 
            {
              Variable_dec_part RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Variable_dec vd = (Variable_dec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.err.println(" reserved word VAR expected"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("v_d_p",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // v_d_p ::= 
            {
              Variable_dec_part RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("v_d_p",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // v_d_p ::= VAR var_dec 
            {
              Variable_dec_part RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Variable_dec vd = (Variable_dec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Variable_dec_part(vd); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("v_d_p",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // block_p ::= v_d_p c_stament 
            {
              Block_p RESULT =null;
		int vdpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vdpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Variable_dec_part vdp = (Variable_dec_part)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int c_sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c_sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Compound_stament c_s = (Compound_stament)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Block_p(vdp,c_s);                                                                                
                                                                                   SymbolTable.profundidad="main";
                                                                                   SymbolTable.UltimaFuncion="main";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block_p",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // block ::= v_d_p p_d_p c_stament 
            {
              Block RESULT =null;
		int vdpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vdpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Variable_dec_part vdp = (Variable_dec_part)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pdpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pdpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Procedure_dec_part pdp = (Procedure_dec_part)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int c_sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c_sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Compound_stament c_s = (Compound_stament)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Block (vdp,pdp,c_s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // program ::= PROGRAM error 
            {
              Program RESULT =null;
		 System.err.println(" program ID expected"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program ::= error ID SEMICOLON block DOT 
            {
              Program RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int blockleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int blockright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Block block = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.err.println(" reserved word PROGRAM expected"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= PROGRAM ID error block DOT 
            {
              Program RESULT =null;
		 System.err.println(" ; expected"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= PROGRAM ID SEMICOLON block DOT 
            {
              Program RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int blockleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int blockright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Block block = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Program (id,block); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

