package p_minipascal;
import necessities.*;
import java.util.*;
import java.io.*;
parser code {:
    
    /* Change the method report_error so it will display the line and
       column of where the error occurred in the input as well as the
       reason for the error which is passed into the method in the
       String 'message'. */
    public void report_error(String message, Object info) {
   
        /* Create a StringBuilder called 'm' with the string 'Error' in it. */
        StringBuilder m = new StringBuilder("Error");
   
        /* Check if the information passed to the method is the same
           type as the type java_cup.runtime.Symbol. */
        if (info instanceof java_cup.runtime.Symbol) {
            /* Declare a java_cup.runtime.Symbol object 's' with the
               information in the object info that is being typecasted
               as a java_cup.runtime.Symbol object. */
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
            /* Check if the line number in the input is greater or
               equal to zero. */
            if (s.left >= 0) {                
                /* Add to the end of the StringBuilder error message
                   the line number of the error in the input. */
                m.append(" in line "+(s.left+1));   
                /* Check if the column number in the input is greater
                   or equal to zero. */
                if (s.right >= 0)                    
                    /* Add to the end of the StringBuilder error message
                       the column number of the error in the input. */
                    m.append(", column "+(s.right+1));
            }
        }
   
        /* Add to the end of the StringBuilder error message created in
           this method the message that was passed into this method. */
        m.append(" : "+message);
   
        /* Print the contents of the StringBuilder 'm', which contains
           an error message, out on a line. */
        System.err.println(m);
    }
   
    /* Change the method report_fatal_error so when it reports a fatal
       error it will display the line and column number of where the
       fatal error occurred in the input as well as the reason for the
       fatal error which is passed into the method in the object
       'message' and then exit.*/
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }
:};
   

   
/* ------------Declaration of Terminals and Non Terminals Section----------- */
/* Types */
terminal            INTEGER, CHAR, BOOLEAN, STRING, VAR, ARRAY;

/*Booleans */
terminal            TRUE, FALSE;

/*ciclos */
terminal            PROCEDURE, IF, ELSE, WHILE, DO, FOR, TO, REPEAT, THEN, BEGIN, END, OF;

/*functions */
terminal            PROGRAM;

/*Symbols*/
terminal            SEMICOLON, COLON, COMMA, DOT;   

/*IO*/
terminal            READ, WRITE, WRITELN;

/* Arithmetic */
terminal            PLUS,MINUS,TIMES,DIVIDE;

/*Groups*/
terminal            LPAREN, RPAREN, LCOR, RCOR;

/* Boolean Expressions */
terminal            GREATEREQ, LESSEQ, GREATER, LESS, NEQ, EQU;

/* Logic operators */
terminal            NOT, OR, AND;

/*Assignment*/
terminal            ASSIGN;

/*Values*/
terminal    String      ID;
terminal    String      CONSTSTR;
terminal    Integer     NUMBER;
terminal    Character   CONSTCHAR;

 /*Non Terminals section*/
non terminal Program program;
non terminal Block block;
non terminal Variable_dec_part v_d_p;
non terminal Variable_dec var_dec;
non terminal Type type;
non terminal Array_type array_t;
non terminal Index_range index_r;
non terminal Simple_type simple_t;
non terminal Type_ident t_id;
non terminal Procedure_dec_part p_d_p;
non terminal Procedure_dec proc_dec;
non terminal Stament_part stament_p;
non terminal Compound_stament c_stament;
non terminal Stament stament;
non terminal Simple_stament sim_stament;
non terminal Structured_stament struct_stament;
non terminal Assign_stament assign_s;
non terminal Procedure_stament proc_s;
non terminal Procedure_iden proc_id;
non terminal Read_stament read_s;
non terminal Input_variable input_var;
non terminal Write_stament write_s;
non terminal Output_value output_val;
non terminal If_stament if_stament;
non terminal While_stament while_stament;
non terminal Expression exp;
non terminal Simple_expression sim_exp;
non terminal Term term;
non terminal Factor factor;
non terminal Variable var;
non terminal Indexed_variable ind_var;
non terminal Array_variable array_var;
non terminal Entire_variable ent_var;
non terminal Variable_identifier var_ident;
non terminal Staments staments;      /////NOT DONE YET
non terminal Writes writes; /////NOT DONE YET
non terminal more_terms;
non terminal more_fac;

/* precedence thingy */
precedence left OR;
precedence left AND;
precedence left EQU, NEQ, LESS, LESSEQ, GREATEREQ, GREATER;
precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE;
precedence right NOT;
precedence nonassoc ELSE;


/* ----------------------------Grammar Section-------------------- */

program ::= PROGRAM ID:id SEMICOLON block:block                                 {: RESULT = new Program (id,block); :}                    
;

block ::= v_d_p:vdp p_d_p:pdp stament_p:sp                                      {: RESULT = new Block (vdp,pdp,sp); :}                        
;

v_d_p ::= VAR var_dec:vd SEMICOLON  v_d_p:vdp                                   {: vdp.add(vd); RESULT = vdp; :} 
          |/*lambda*/                                                           {: RESULT = new Variable_dec_part(); :}
;

var_dec ::= ID:id COMMA var_dec:vd                                              {: vd.add(id); RESULT = vd; :}
            |ID:id COLON type:tipo                                              {: RESULT = new Variable_dec(id,tipo); :}
;

type ::= simple_t:st                                                            {: RESULT = new Type(st); :}
         |array_t:at                                                            {: RESULT = new Type(at); :}
;

array_t ::= ARRAY LCOR index_r:ind_r RCOR OF simple_t:sim_t                     {: RESULT = new Array_type(ind_r,sim_t); :}
;

index_r ::= NUMBER:n1 DOT DOT NUMBER:n2                                         {:RESULT = new Index_range(n1,n2); :}
;

simple_t ::= t_id:tid                                                           {: RESULT = new Simple_type (tid); :}
;

t_id ::= INTEGER                                                                {: RESULT = new Type_ident(); :}
         |CHAR                                                                  {: RESULT = new Type_ident(); :}
         |BOOLEAN                                                               {: RESULT = new Type_ident(); :}
         |STRING                                                                {: RESULT = new Type_ident(); :}
;

p_d_p ::=  proc_dec:pd SEMICOLON p_d_p:pdp                                      {: pdp.add(pd); RESULT= pdp; :}
           |/*Lambda*/                                                          {: RESULT = new Procedure_dec_part(); :}
;

proc_dec ::= PROCEDURE ID:id SEMICOLON block:bl                                 {: RESULT = new Procedure_dec(id, bl); :}
;

stament_p ::= c_stament:cst                                                     {: RESULT = new Stament_part(cst); :}
;

c_stament ::= BEGIN staments:sts END                                            {:RESULT = new Compound_stament(sts); :}
;

staments ::= stament:st SEMICOLON staments:sts                                  {:sts.add(st); RESULT = sts; :}
             |stament:st                                                        {:RESULT = new Staments(); RESULT.add(st); :}
;

stament ::= sim_stament:sim_st                                                  {: RESULT = new Stament(sim_st); :}
            |struct_stament:st_st                                               {: RESULT = new Stament(st_st); :}
;

sim_stament ::= assign_s:as_s                                                   {: RESULT = new Simple_stament(as_s); :}
                |proc_s:p_s                                                     {: RESULT = new Simple_stament(p_s); :}
                |read_s:r_s                                                     {: RESULT = new Simple_stament(r_s); :}
                |write_s:w_s                                                    {: RESULT = new Simple_stament(w_s); :}
;

assign_s ::= var:v ASSIGN exp:ex                                                {: RESULT = new Assign_stament(v,ex); :}
;

proc_s ::= proc_id:p_id                                                         {: RESULT = new Procedure_stament(p_id); :}
;

proc_id ::= ID:id                                                               {: RESULT = new Procedure_iden(id); :}
;

read_s ::= READ LPAREN input_var:i_v RPAREN                                     {: RESULT = new Read_stament(i_v); :}
;

input_var ::= var:v                                                             {: RESULT = new Input_variable(v); :}
;

write_s ::= WRITE LPAREN writes:wr RPAREN                                       {: RESULT = new Write_stament(wr); :}
;

writes ::= output_val:ov COMMA writes:wr                                        {: wr.add(ov); RESULT = wr; :}
           |output_val:ov                                                       {: RESULT = new Writes(); RESULT.add(ov); :}
;

output_val ::= exp:ex                                                           {: RESULT = new Output_value(ex); :}
;

struct_stament ::= c_stament: c_st                                              {: RESULT = new Structured_stament(c_st); :}
             |if_stament: if_st                                                 {: RESULT = new Structured_stament(if_st); :}
             |while_stament: w_st                                               {: RESULT = new Structured_stament(w_st); :}
;

if_stament ::= IF exp:ex THEN stament:st                                        {: RESULT = new If_stament(ex,st); :}
         |IF exp:ex THEN stament:st1 ELSE stament:st2                           {: RESULT = new If_stament(ex,st1,st2); :}
;

while_stament ::= WHILE exp:ex DO stament:st                                    {: RESULT = new While_stament(ex,st); :}
;

exp ::= sim_exp                                                                 {::} 
        |sim_exp EQU sim_exp                                                    {::}
	|sim_exp NEQ sim_exp                                                    {::}
	|sim_exp LESS sim_exp                                                   {::}
	|sim_exp LESSEQ sim_exp                                                 {::}
	|sim_exp GREATEREQ sim_exp                                              {::}
	|sim_exp GREATER sim_exp                                                {::}
;

sim_exp ::= PLUS term more_terms                                                {::}
	|MINUS term more_terms                                                  {::}
	|term more_terms                                                        {::}
;

more_terms ::= PLUS term more_terms                                             {::}
	|MINUS term more_terms                                                  {::}
	| /*lambda*/                                                            {::}
;


term ::= factor more_fac                                                        {::}
;

more_fac ::= TIMES factor more_fac                                              {::}
	|DIVIDE factor more_fac                                                 {::}
	|/*lambda*/                                                             {::}
;	

factor ::= var                                                                  {::}
	|CONSTSTR                                                               {::}
	|CONSTCHAR                                                              {::}
	|NUMBER                                                                 {::}	
	|LPAREN exp RPAREN                                                      {::}
	|NOT factor                                                             {::}
;

var ::= ent_var: ent_v                                                          {: RESULT = new Variable(ent_v); :}
        |ind_var: ind_v                                                         {: RESULT = new Variable(ind_v); :}
;

ind_var ::= array_var:ar_v LCOR exp:ex RCOR                                     {: RESULT = new Indexed_variable(ar_v, ex); :}
;

array_var ::= ent_var:e_var                                                     {: RESULT = new Array_variable(e_var); :}
;

ent_var ::= var_ident:var_id                                                    {: RESULT = new Entire_variable(var_id); :} 
;

var_ident ::= ID:id                                                             {: RESULT = new Variable_identifier(id); :}
;
      