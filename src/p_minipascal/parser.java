
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Mar 26 14:01:12 CST 2017
//----------------------------------------------------

package p_minipascal;

import necessities.*;
import java.util.*;
import java.io.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Mar 26 14:01:12 CST 2017
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\117\000\002\002\007\000\002\002\004\000\002\003" +
    "\005\000\002\047\004\000\002\004\004\000\002\004\002" +
    "\000\002\005\005\000\002\005\002\000\002\045\005\000" +
    "\002\045\005\000\002\013\004\000\002\013\002\000\002" +
    "\014\005\000\002\046\006\000\002\046\011\000\002\050" +
    "\002\000\002\006\003\000\002\006\003\000\002\007\010" +
    "\000\002\010\006\000\002\011\003\000\002\012\003\000" +
    "\002\012\003\000\002\012\003\000\002\012\003\000\002" +
    "\015\005\000\002\015\004\000\002\043\005\000\002\043" +
    "\003\000\002\016\003\000\002\016\003\000\002\017\003" +
    "\000\002\017\003\000\002\017\003\000\002\017\003\000" +
    "\002\021\005\000\002\022\003\000\002\023\003\000\002" +
    "\024\006\000\002\025\003\000\002\026\006\000\002\044" +
    "\005\000\002\044\003\000\002\027\003\000\002\020\003" +
    "\000\002\020\003\000\002\020\003\000\002\030\006\000" +
    "\002\030\010\000\002\031\006\000\002\032\003\000\002" +
    "\032\005\000\002\032\005\000\002\032\005\000\002\032" +
    "\005\000\002\032\005\000\002\032\005\000\002\033\003" +
    "\000\002\033\005\000\002\033\005\000\002\033\004\000" +
    "\002\033\004\000\002\034\003\000\002\034\005\000\002" +
    "\034\005\000\002\035\003\000\002\035\003\000\002\035" +
    "\003\000\002\035\003\000\002\035\003\000\002\035\003" +
    "\000\002\035\005\000\002\035\004\000\002\036\003\000" +
    "\002\036\003\000\002\037\006\000\002\040\003\000\002" +
    "\041\003\000\002\042\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\220\000\004\030\005\001\002\000\004\002\222\001" +
    "\002\000\004\062\006\001\002\000\004\031\007\001\002" +
    "\000\010\010\010\014\ufffc\025\ufffc\001\002\000\010\014" +
    "\ufffa\025\ufffa\062\211\001\002\000\006\014\015\025\ufff6" +
    "\001\002\000\004\034\013\001\002\000\004\002\001\001" +
    "\002\000\006\010\010\025\ufffc\001\002\000\004\062\154" +
    "\001\002\000\006\014\015\025\ufff6\001\002\000\004\025" +
    "\020\001\002\000\020\015\034\017\024\025\020\026\032" +
    "\035\022\036\035\062\036\001\002\000\004\034\uffff\001" +
    "\002\000\004\044\147\001\002\000\010\016\uffd3\026\uffd3" +
    "\031\uffd3\001\002\000\026\012\057\013\065\040\053\041" +
    "\070\044\060\056\055\062\061\063\054\064\062\065\067" +
    "\001\002\000\010\016\uffdd\026\uffdd\031\uffdd\001\002\000" +
    "\010\016\uffd4\026\uffd4\031\uffd4\001\002\000\004\046\141" +
    "\001\002\000\010\016\uffe3\026\uffe3\031\uffe3\001\002\000" +
    "\010\016\uffe1\026\uffe1\031\uffe1\001\002\000\012\016\uffe7" +
    "\026\uffe7\031\uffe7\034\uffe7\001\002\000\010\016\uffd5\026" +
    "\uffd5\031\uffd5\001\002\000\026\012\057\013\065\040\053" +
    "\041\070\044\060\056\055\062\061\063\054\064\062\065" +
    "\067\001\002\000\004\044\125\001\002\000\014\016\uffdc" +
    "\026\uffdc\031\uffdc\046\uffb3\061\uffb3\001\002\000\052\016" +
    "\uffb4\020\uffb4\024\uffb4\026\uffb4\031\uffb4\033\uffb4\040\uffb4" +
    "\041\uffb4\042\uffb4\043\uffb4\045\uffb4\046\uffb4\047\uffb4\050" +
    "\uffb4\051\uffb4\052\uffb4\053\uffb4\054\uffb4\055\uffb4\061\uffb4" +
    "\001\002\000\010\016\uffe2\026\uffe2\031\uffe2\001\002\000" +
    "\052\016\uffb8\020\uffb8\024\uffb8\026\uffb8\031\uffb8\033\uffb8" +
    "\040\uffb8\041\uffb8\042\uffb8\043\uffb8\045\uffb8\046\uffb5\047" +
    "\uffb8\050\uffb8\051\uffb8\052\uffb8\053\uffb8\054\uffb8\055\uffb8" +
    "\061\uffb8\001\002\000\010\016\uffe4\026\uffe4\031\uffe4\001" +
    "\002\000\010\016\uffdf\026\uffdf\031\uffdf\001\002\000\006" +
    "\026\uffe5\031\123\001\002\000\004\061\052\001\002\000" +
    "\050\016\uffb7\020\uffb7\024\uffb7\026\uffb7\031\uffb7\033\uffb7" +
    "\040\uffb7\041\uffb7\042\uffb7\043\uffb7\045\uffb7\047\uffb7\050" +
    "\uffb7\051\uffb7\052\uffb7\053\uffb7\054\uffb7\055\uffb7\061\uffb7" +
    "\001\002\000\004\026\051\001\002\000\010\016\uffe0\026" +
    "\uffe0\031\uffe0\001\002\000\012\016\uffe8\026\uffe8\031\uffe8" +
    "\034\uffe8\001\002\000\026\012\057\013\065\040\053\041" +
    "\070\044\060\056\055\062\061\063\054\064\062\065\067" +
    "\001\002\000\022\012\057\013\065\044\060\056\055\062" +
    "\061\063\054\064\062\065\067\001\002\000\046\016\uffbf" +
    "\020\uffbf\024\uffbf\026\uffbf\031\uffbf\033\uffbf\040\uffbf\041" +
    "\uffbf\042\uffbf\043\uffbf\045\uffbf\047\uffbf\050\uffbf\051\uffbf" +
    "\052\uffbf\053\uffbf\054\uffbf\055\uffbf\001\002\000\022\012" +
    "\057\013\065\044\060\056\055\062\061\063\054\064\062" +
    "\065\067\001\002\000\010\016\uffde\026\uffde\031\uffde\001" +
    "\002\000\046\016\uffbb\020\uffbb\024\uffbb\026\uffbb\031\uffbb" +
    "\033\uffbb\040\uffbb\041\uffbb\042\uffbb\043\uffbb\045\uffbb\047" +
    "\uffbb\050\uffbb\051\uffbb\052\uffbb\053\uffbb\054\uffbb\055\uffbb" +
    "\001\002\000\026\012\057\013\065\040\053\041\070\044" +
    "\060\056\055\062\061\063\054\064\062\065\067\001\002" +
    "\000\050\016\uffb3\020\uffb3\024\uffb3\026\uffb3\031\uffb3\033" +
    "\uffb3\040\uffb3\041\uffb3\042\uffb3\043\uffb3\045\uffb3\046\uffb3" +
    "\047\uffb3\050\uffb3\051\uffb3\052\uffb3\053\uffb3\054\uffb3\055" +
    "\uffb3\001\002\000\046\016\uffbd\020\uffbd\024\uffbd\026\uffbd" +
    "\031\uffbd\033\uffbd\040\uffbd\041\uffbd\042\uffbd\043\uffbd\045" +
    "\uffbd\047\uffbd\050\uffbd\051\uffbd\052\uffbd\053\uffbd\054\uffbd" +
    "\055\uffbd\001\002\000\046\016\uffc3\020\uffc3\024\uffc3\026" +
    "\uffc3\031\uffc3\033\uffc3\040\uffc3\041\uffc3\042\uffc3\043\uffc3" +
    "\045\uffc3\047\uffc3\050\uffc3\051\uffc3\052\uffc3\053\uffc3\054" +
    "\uffc3\055\uffc3\001\002\000\046\016\uffc8\020\uffc8\024\uffc8" +
    "\026\uffc8\031\uffc8\033\uffc8\040\uffc8\041\uffc8\042\074\043" +
    "\073\045\uffc8\047\uffc8\050\uffc8\051\uffc8\052\uffc8\053\uffc8" +
    "\054\uffc8\055\uffc8\001\002\000\046\016\uffbc\020\uffbc\024" +
    "\uffbc\026\uffbc\031\uffbc\033\uffbc\040\uffbc\041\uffbc\042\uffbc" +
    "\043\uffbc\045\uffbc\047\uffbc\050\uffbc\051\uffbc\052\uffbc\053" +
    "\uffbc\054\uffbc\055\uffbc\001\002\000\042\016\uffcf\020\uffcf" +
    "\024\uffcf\026\uffcf\031\uffcf\033\uffcf\040\102\041\103\045" +
    "\uffcf\047\uffcf\050\077\051\100\052\101\053\104\054\105" +
    "\055\106\001\002\000\046\016\uffbe\020\uffbe\024\uffbe\026" +
    "\uffbe\031\uffbe\033\uffbe\040\uffbe\041\uffbe\042\uffbe\043\uffbe" +
    "\045\uffbe\047\uffbe\050\uffbe\051\uffbe\052\uffbe\053\uffbe\054" +
    "\uffbe\055\uffbe\001\002\000\022\012\057\013\065\044\060" +
    "\056\055\062\061\063\054\064\062\065\067\001\002\000" +
    "\046\016\uffc0\020\uffc0\024\uffc0\026\uffc0\031\uffc0\033\uffc0" +
    "\040\uffc0\041\uffc0\042\uffc0\043\uffc0\045\uffc0\047\uffc0\050" +
    "\uffc0\051\uffc0\052\uffc0\053\uffc0\054\uffc0\055\uffc0\001\002" +
    "\000\046\016\uffc4\020\uffc4\024\uffc4\026\uffc4\031\uffc4\033" +
    "\uffc4\040\uffc4\041\uffc4\042\074\043\073\045\uffc4\047\uffc4" +
    "\050\uffc4\051\uffc4\052\uffc4\053\uffc4\054\uffc4\055\uffc4\001" +
    "\002\000\022\012\057\013\065\044\060\056\055\062\061" +
    "\063\054\064\062\065\067\001\002\000\022\012\057\013" +
    "\065\044\060\056\055\062\061\063\054\064\062\065\067" +
    "\001\002\000\046\016\uffc2\020\uffc2\024\uffc2\026\uffc2\031" +
    "\uffc2\033\uffc2\040\uffc2\041\uffc2\042\uffc2\043\uffc2\045\uffc2" +
    "\047\uffc2\050\uffc2\051\uffc2\052\uffc2\053\uffc2\054\uffc2\055" +
    "\uffc2\001\002\000\046\016\uffc1\020\uffc1\024\uffc1\026\uffc1" +
    "\031\uffc1\033\uffc1\040\uffc1\041\uffc1\042\uffc1\043\uffc1\045" +
    "\uffc1\047\uffc1\050\uffc1\051\uffc1\052\uffc1\053\uffc1\054\uffc1" +
    "\055\uffc1\001\002\000\026\012\057\013\065\040\053\041" +
    "\070\044\060\056\055\062\061\063\054\064\062\065\067" +
    "\001\002\000\026\012\057\013\065\040\053\041\070\044" +
    "\060\056\055\062\061\063\054\064\062\065\067\001\002" +
    "\000\026\012\057\013\065\040\053\041\070\044\060\056" +
    "\055\062\061\063\054\064\062\065\067\001\002\000\022" +
    "\012\057\013\065\044\060\056\055\062\061\063\054\064" +
    "\062\065\067\001\002\000\022\012\057\013\065\044\060" +
    "\056\055\062\061\063\054\064\062\065\067\001\002\000" +
    "\026\012\057\013\065\040\053\041\070\044\060\056\055" +
    "\062\061\063\054\064\062\065\067\001\002\000\026\012" +
    "\057\013\065\040\053\041\070\044\060\056\055\062\061" +
    "\063\054\064\062\065\067\001\002\000\026\012\057\013" +
    "\065\040\053\041\070\044\060\056\055\062\061\063\054" +
    "\064\062\065\067\001\002\000\026\016\uffce\020\uffce\024" +
    "\uffce\026\uffce\031\uffce\033\uffce\040\102\041\103\045\uffce" +
    "\047\uffce\001\002\000\026\016\uffcd\020\uffcd\024\uffcd\026" +
    "\uffcd\031\uffcd\033\uffcd\040\102\041\103\045\uffcd\047\uffcd" +
    "\001\002\000\026\016\uffcc\020\uffcc\024\uffcc\026\uffcc\031" +
    "\uffcc\033\uffcc\040\102\041\103\045\uffcc\047\uffcc\001\002" +
    "\000\046\016\uffc6\020\uffc6\024\uffc6\026\uffc6\031\uffc6\033" +
    "\uffc6\040\uffc6\041\uffc6\042\074\043\073\045\uffc6\047\uffc6" +
    "\050\uffc6\051\uffc6\052\uffc6\053\uffc6\054\uffc6\055\uffc6\001" +
    "\002\000\046\016\uffc7\020\uffc7\024\uffc7\026\uffc7\031\uffc7" +
    "\033\uffc7\040\uffc7\041\uffc7\042\074\043\073\045\uffc7\047" +
    "\uffc7\050\uffc7\051\uffc7\052\uffc7\053\uffc7\054\uffc7\055\uffc7" +
    "\001\002\000\026\016\uffc9\020\uffc9\024\uffc9\026\uffc9\031" +
    "\uffc9\033\uffc9\040\102\041\103\045\uffc9\047\uffc9\001\002" +
    "\000\026\016\uffcb\020\uffcb\024\uffcb\026\uffcb\031\uffcb\033" +
    "\uffcb\040\102\041\103\045\uffcb\047\uffcb\001\002\000\026" +
    "\016\uffca\020\uffca\024\uffca\026\uffca\031\uffca\033\uffca\040" +
    "\102\041\103\045\uffca\047\uffca\001\002\000\004\045\120" +
    "\001\002\000\046\016\uffba\020\uffba\024\uffba\026\uffba\031" +
    "\uffba\033\uffba\040\uffba\041\uffba\042\uffba\043\uffba\045\uffba" +
    "\047\uffba\050\uffba\051\uffba\052\uffba\053\uffba\054\uffba\055" +
    "\uffba\001\002\000\046\016\uffb9\020\uffb9\024\uffb9\026\uffb9" +
    "\031\uffb9\033\uffb9\040\uffb9\041\uffb9\042\uffb9\043\uffb9\045" +
    "\uffb9\047\uffb9\050\uffb9\051\uffb9\052\uffb9\053\uffb9\054\uffb9" +
    "\055\uffb9\001\002\000\046\016\uffc5\020\uffc5\024\uffc5\026" +
    "\uffc5\031\uffc5\033\uffc5\040\uffc5\041\uffc5\042\074\043\073" +
    "\045\uffc5\047\uffc5\050\uffc5\051\uffc5\052\uffc5\053\uffc5\054" +
    "\uffc5\055\uffc5\001\002\000\016\015\034\017\024\025\020" +
    "\035\022\036\035\062\036\001\002\000\004\026\uffe6\001" +
    "\002\000\026\012\057\013\065\040\053\041\070\044\060" +
    "\056\055\062\061\063\054\064\062\065\067\001\002\000" +
    "\006\033\uffd6\045\uffd6\001\002\000\004\045\133\001\002" +
    "\000\006\033\131\045\uffd7\001\002\000\026\012\057\013" +
    "\065\040\053\041\070\044\060\056\055\062\061\063\054" +
    "\064\062\065\067\001\002\000\004\045\uffd8\001\002\000" +
    "\010\016\uffd9\026\uffd9\031\uffd9\001\002\000\004\024\135" +
    "\001\002\000\016\015\034\017\024\025\020\035\022\036" +
    "\035\062\036\001\002\000\010\016\137\026\uffd2\031\uffd2" +
    "\001\002\000\016\015\034\017\024\025\020\035\022\036" +
    "\035\062\036\001\002\000\010\016\uffd1\026\uffd1\031\uffd1" +
    "\001\002\000\026\012\057\013\065\040\053\041\070\044" +
    "\060\056\055\062\061\063\054\064\062\065\067\001\002" +
    "\000\004\047\143\001\002\000\050\016\uffb6\020\uffb6\024" +
    "\uffb6\026\uffb6\031\uffb6\033\uffb6\040\uffb6\041\uffb6\042\uffb6" +
    "\043\uffb6\045\uffb6\047\uffb6\050\uffb6\051\uffb6\052\uffb6\053" +
    "\uffb6\054\uffb6\055\uffb6\061\uffb6\001\002\000\004\020\145" +
    "\001\002\000\016\015\034\017\024\025\020\035\022\036" +
    "\035\062\036\001\002\000\010\016\uffd0\026\uffd0\031\uffd0" +
    "\001\002\000\004\062\061\001\002\000\004\045\uffda\001" +
    "\002\000\004\045\152\001\002\000\010\016\uffdb\026\uffdb" +
    "\031\uffdb\001\002\000\004\025\ufff7\001\002\000\006\032" +
    "\155\044\156\001\002\000\014\004\162\005\172\006\164" +
    "\007\165\011\163\001\002\000\004\045\ufff2\001\002\000" +
    "\004\045\160\001\002\000\004\032\161\001\002\000\014" +
    "\004\162\005\172\006\164\007\165\011\163\001\002\000" +
    "\010\010\uffec\025\uffec\031\uffec\001\002\000\004\046\173" +
    "\001\002\000\010\010\uffea\025\uffea\031\uffea\001\002\000" +
    "\010\010\uffe9\025\uffe9\031\uffe9\001\002\000\010\010\uffed" +
    "\025\uffed\031\uffed\001\002\000\010\010\ufff0\025\ufff0\031" +
    "\ufff0\001\002\000\006\010\ufff3\025\ufff3\001\002\000\010" +
    "\010\ufff1\025\ufff1\031\ufff1\001\002\000\010\010\uffeb\025" +
    "\uffeb\031\uffeb\001\002\000\004\064\175\001\002\000\004" +
    "\047\201\001\002\000\004\034\176\001\002\000\004\034" +
    "\177\001\002\000\004\064\200\001\002\000\004\047\uffee" +
    "\001\002\000\004\027\202\001\002\000\012\004\162\005" +
    "\172\006\164\007\165\001\002\000\010\010\uffef\025\uffef" +
    "\031\uffef\001\002\000\006\010\ufff4\025\ufff4\001\002\000" +
    "\004\025\020\001\002\000\004\031\207\001\002\000\006" +
    "\014\ufff5\025\ufff5\001\002\000\004\031\ufffe\001\002\000" +
    "\006\032\217\033\216\001\002\000\004\031\214\001\002" +
    "\000\006\014\ufffd\025\ufffd\001\002\000\010\014\ufffa\025" +
    "\ufffa\062\211\001\002\000\006\014\ufffb\025\ufffb\001\002" +
    "\000\004\062\211\001\002\000\014\004\162\005\172\006" +
    "\164\007\165\011\163\001\002\000\004\031\ufff8\001\002" +
    "\000\004\031\ufff9\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\220\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\003\011\004\010" +
    "\001\001\000\006\005\212\045\211\001\001\000\010\013" +
    "\016\014\015\046\013\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\004\204\047\205\001\001\000\002\001" +
    "\001\000\010\013\152\014\015\046\013\001\001\000\004" +
    "\015\020\001\001\000\044\015\032\016\043\017\041\020" +
    "\027\021\037\022\030\023\024\024\047\026\042\030\025" +
    "\031\022\036\044\037\045\040\026\041\040\042\036\043" +
    "\046\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\032\143\033\065\034\063\035\062\036" +
    "\070\037\045\040\026\041\040\042\036\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\032\133\033\065\034\063\035\062\036\070\037" +
    "\045\040\026\041\040\042\036\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\032\055" +
    "\033\065\034\063\035\062\036\070\037\045\040\026\041" +
    "\040\042\036\001\001\000\020\034\121\035\062\036\070" +
    "\037\045\040\026\041\040\042\036\001\001\000\002\001" +
    "\001\000\016\035\120\036\070\037\045\040\026\041\040" +
    "\042\036\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\032\116\033\065\034\063\035\062\036\070\037\045" +
    "\040\026\041\040\042\036\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\034" +
    "\071\035\062\036\070\037\045\040\026\041\040\042\036" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\035" +
    "\075\036\070\037\045\040\026\041\040\042\036\001\001" +
    "\000\016\035\074\036\070\037\045\040\026\041\040\042" +
    "\036\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\033\115\034\063\035\062\036\070\037\045\040\026\041" +
    "\040\042\036\001\001\000\022\033\114\034\063\035\062" +
    "\036\070\037\045\040\026\041\040\042\036\001\001\000" +
    "\022\033\113\034\063\035\062\036\070\037\045\040\026" +
    "\041\040\042\036\001\001\000\020\034\112\035\062\036" +
    "\070\037\045\040\026\041\040\042\036\001\001\000\020" +
    "\034\111\035\062\036\070\037\045\040\026\041\040\042" +
    "\036\001\001\000\022\033\110\034\063\035\062\036\070" +
    "\037\045\040\026\041\040\042\036\001\001\000\022\033" +
    "\107\034\063\035\062\036\070\037\045\040\026\041\040" +
    "\042\036\001\001\000\022\033\106\034\063\035\062\036" +
    "\070\037\045\040\026\041\040\042\036\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\044\015\032\016\043" +
    "\017\041\020\027\021\037\022\030\023\024\024\047\026" +
    "\042\030\025\031\022\036\044\037\045\040\026\041\040" +
    "\042\036\043\123\001\001\000\002\001\001\000\030\027" +
    "\127\032\125\033\065\034\063\035\062\036\070\037\045" +
    "\040\026\041\040\042\036\044\126\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\027\127" +
    "\032\125\033\065\034\063\035\062\036\070\037\045\040" +
    "\026\041\040\042\036\044\131\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\042\015\032\016" +
    "\135\017\041\020\027\021\037\022\030\023\024\024\047" +
    "\026\042\030\025\031\022\036\044\037\045\040\026\041" +
    "\040\042\036\001\001\000\002\001\001\000\042\015\032" +
    "\016\137\017\041\020\027\021\037\022\030\023\024\024" +
    "\047\026\042\030\025\031\022\036\044\037\045\040\026" +
    "\041\040\042\036\001\001\000\002\001\001\000\024\032" +
    "\141\033\065\034\063\035\062\036\070\037\045\040\026" +
    "\041\040\042\036\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\042\015\032\016\145\017\041" +
    "\020\027\021\037\022\030\023\024\024\047\026\042\030" +
    "\025\031\022\036\044\037\045\040\026\041\040\042\036" +
    "\001\001\000\002\001\001\000\016\025\150\036\147\037" +
    "\045\040\026\041\040\042\036\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\006\203\007\166\011\170\012\165" +
    "\001\001\000\004\050\156\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\006\167\007\166\011\170\012\165" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\173\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\011\202\012\165\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\207\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\005" +
    "\214\045\211\001\001\000\002\001\001\000\004\045\220" +
    "\001\001\000\012\006\217\007\166\011\170\012\165\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    /* Change the method report_error so it will display the line and
       column of where the error occurred in the input as well as the
       reason for the error which is passed into the method in the
       String 'message'. */
    public void report_error(String message, Object info) {
   
        /* Create a StringBuilder called 'm' with the string 'Error' in it. */
        StringBuilder m = new StringBuilder("Error");
   
        /* Check if the information passed to the method is the same
           type as the type java_cup.runtime.Symbol. */
        if (info instanceof java_cup.runtime.Symbol) {
            /* Declare a java_cup.runtime.Symbol object 's' with the
               information in the object info that is being typecasted
               as a java_cup.runtime.Symbol object. */
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
            /* Check if the line number in the input is greater or
               equal to zero. */
            if (s.left >= 0) {                
                /* Add to the end of the StringBuilder error message
                   the line number of the error in the input. */
                m.append(" in line "+(s.left+1));   
                /* Check if the column number in the input is greater
                   or equal to zero. */
                if (s.right >= 0)                    
                    /* Add to the end of the StringBuilder error message
                       the column number of the error in the input. */
                    m.append(", column "+(s.right+1));
            }
        }
   
        /* Add to the end of the StringBuilder error message created in
           this method the message that was passed into this method. */
        m.append(" : "+message);
   
        /* Print the contents of the StringBuilder 'm', which contains
           an error message, out on a line. */
        System.err.println(m);
    }
   
    /* Change the method report_fatal_error so when it reports a fatal
       error it will display the line and column number of where the
       fatal error occurred in the input as well as the reason for the
       fatal error which is passed into the method in the object
       'message' and then exit.*/
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // var_ident ::= ID 
            {
              Variable_identifier RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Variable_identifier(id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_ident",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ent_var ::= var_ident 
            {
              Entire_variable RESULT =null;
		int var_idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var_idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Variable_identifier var_id = (Variable_identifier)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Entire_variable(var_id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ent_var",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // array_var ::= ent_var 
            {
              Array_variable RESULT =null;
		int e_varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e_varright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Entire_variable e_var = (Entire_variable)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Array_variable(e_var); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_var",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ind_var ::= array_var LCOR exp RCOR 
            {
              Indexed_variable RESULT =null;
		int ar_vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int ar_vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Array_variable ar_v = (Array_variable)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression ex = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Indexed_variable(ar_v, ex); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ind_var",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // var ::= ind_var 
            {
              Variable RESULT =null;
		int ind_vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ind_vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Indexed_variable ind_v = (Indexed_variable)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Variable(ind_v); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // var ::= ent_var 
            {
              Variable RESULT =null;
		int ent_vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ent_vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Entire_variable ent_v = (Entire_variable)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Variable(ent_v); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // factor ::= NOT factor 
            {
              Factor RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // factor ::= LPAREN exp RPAREN 
            {
              Factor RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // factor ::= TRUE 
            {
              Factor RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // factor ::= FALSE 
            {
              Factor RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // factor ::= NUMBER 
            {
              Factor RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // factor ::= CONSTCHAR 
            {
              Factor RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // factor ::= CONSTSTR 
            {
              Factor RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // factor ::= var 
            {
              Factor RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // term ::= term DIVIDE factor 
            {
              Term RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // term ::= term TIMES factor 
            {
              Term RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // term ::= factor 
            {
              Term RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // sim_exp ::= MINUS term 
            {
              Simple_expression RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sim_exp",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // sim_exp ::= PLUS term 
            {
              Simple_expression RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sim_exp",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // sim_exp ::= sim_exp MINUS term 
            {
              Simple_expression RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sim_exp",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // sim_exp ::= sim_exp PLUS term 
            {
              Simple_expression RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sim_exp",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // sim_exp ::= term 
            {
              Simple_expression RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sim_exp",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // exp ::= sim_exp GREATER sim_exp 
            {
              Expression RESULT =null;
		int se1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int se1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Simple_expression se1 = (Simple_expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int se2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int se2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Simple_expression se2 = (Simple_expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Greater(se1,se2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // exp ::= sim_exp GREATEREQ sim_exp 
            {
              Expression RESULT =null;
		int se1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int se1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Simple_expression se1 = (Simple_expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int se2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int se2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Simple_expression se2 = (Simple_expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new GreaterE(se1,se2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // exp ::= sim_exp LESSEQ sim_exp 
            {
              Expression RESULT =null;
		int se1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int se1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Simple_expression se1 = (Simple_expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int se2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int se2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Simple_expression se2 = (Simple_expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LessE(se1,se2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // exp ::= sim_exp LESS sim_exp 
            {
              Expression RESULT =null;
		int se1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int se1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Simple_expression se1 = (Simple_expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int se2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int se2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Simple_expression se2 = (Simple_expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Less(se1,se2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // exp ::= sim_exp NEQ sim_exp 
            {
              Expression RESULT =null;
		int se1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int se1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Simple_expression se1 = (Simple_expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int se2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int se2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Simple_expression se2 = (Simple_expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nequal(se1,se2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // exp ::= sim_exp EQU sim_exp 
            {
              Expression RESULT =null;
		int se1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int se1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Simple_expression se1 = (Simple_expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int se2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int se2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Simple_expression se2 = (Simple_expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Equal(se1,se2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // exp ::= sim_exp 
            {
              Expression RESULT =null;
		int simeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int simeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Simple_expression sime = (Simple_expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =  new Expression(sime); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // while_stament ::= WHILE exp DO stament 
            {
              While_stament RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression ex = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stament st = (Stament)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new While_stament(ex,st); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_stament",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // if_stament ::= IF exp THEN stament ELSE stament 
            {
              If_stament RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expression ex = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int st1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int st1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Stament st1 = (Stament)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int st2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int st2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stament st2 = (Stament)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new If_stament(ex,st1,st2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stament",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // if_stament ::= IF exp THEN stament 
            {
              If_stament RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression ex = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stament st = (Stament)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new If_stament(ex,st); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stament",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // struct_stament ::= while_stament 
            {
              Structured_stament RESULT =null;
		int w_stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int w_stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		While_stament w_st = (While_stament)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Structured_stament(w_st); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("struct_stament",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // struct_stament ::= if_stament 
            {
              Structured_stament RESULT =null;
		int if_stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int if_stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		If_stament if_st = (If_stament)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Structured_stament(if_st); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("struct_stament",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // struct_stament ::= c_stament 
            {
              Structured_stament RESULT =null;
		int c_stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c_stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Compound_stament c_st = (Compound_stament)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Structured_stament(c_st); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("struct_stament",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // output_val ::= exp 
            {
              Output_value RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression ex = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Output_value(ex); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("output_val",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // writes ::= output_val 
            {
              Writes RESULT =null;
		int ovleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ovright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Output_value ov = (Output_value)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Writes(); RESULT.add(ov); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("writes",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // writes ::= output_val COMMA writes 
            {
              Writes RESULT =null;
		int ovleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ovright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Output_value ov = (Output_value)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int wrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Writes wr = (Writes)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 wr.add(ov); RESULT = wr; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("writes",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // write_s ::= WRITE LPAREN writes RPAREN 
            {
              Write_stament RESULT =null;
		int wrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int wrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Writes wr = (Writes)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Write_stament(wr); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("write_s",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // input_var ::= var 
            {
              Input_variable RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Input_variable(v); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("input_var",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // read_s ::= READ LPAREN input_var RPAREN 
            {
              Read_stament RESULT =null;
		int i_vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int i_vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Input_variable i_v = (Input_variable)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Read_stament(i_v); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("read_s",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // proc_id ::= ID 
            {
              Procedure_iden RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Procedure_iden(id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc_id",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // proc_s ::= proc_id 
            {
              Procedure_stament RESULT =null;
		int p_idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Procedure_iden p_id = (Procedure_iden)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Procedure_stament(p_id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc_s",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // assign_s ::= var ASSIGN exp 
            {
              Assign_stament RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression ex = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Assign_stament(v,ex); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_s",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // sim_stament ::= write_s 
            {
              Simple_stament RESULT =null;
		int w_sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int w_sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Write_stament w_s = (Write_stament)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Simple_stament(w_s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sim_stament",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // sim_stament ::= read_s 
            {
              Simple_stament RESULT =null;
		int r_sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int r_sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Read_stament r_s = (Read_stament)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Simple_stament(r_s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sim_stament",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // sim_stament ::= proc_s 
            {
              Simple_stament RESULT =null;
		int p_sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p_sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Procedure_stament p_s = (Procedure_stament)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Simple_stament(p_s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sim_stament",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // sim_stament ::= assign_s 
            {
              Simple_stament RESULT =null;
		int as_sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int as_sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Assign_stament as_s = (Assign_stament)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Simple_stament(as_s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sim_stament",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // stament ::= struct_stament 
            {
              Stament RESULT =null;
		int st_stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int st_stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Structured_stament st_st = (Structured_stament)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Stament(st_st); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stament",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // stament ::= sim_stament 
            {
              Stament RESULT =null;
		int sim_stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sim_stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Simple_stament sim_st = (Simple_stament)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Stament(sim_st); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stament",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // staments ::= stament 
            {
              Staments RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stament st = (Stament)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Staments(); RESULT.add(st); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("staments",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // staments ::= stament SEMICOLON staments 
            {
              Staments RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Stament st = (Stament)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int stsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Staments sts = (Staments)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		sts.add(st); RESULT = sts; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("staments",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // c_stament ::= BEGIN END 
            {
              Compound_stament RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("c_stament",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // c_stament ::= BEGIN staments END 
            {
              Compound_stament RESULT =null;
		int stsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Staments sts = (Staments)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Compound_stament(sts); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("c_stament",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // t_id ::= STRING 
            {
              Type_ident RESULT =null;
		 RESULT = new Type_ident(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("t_id",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // t_id ::= BOOLEAN 
            {
              Type_ident RESULT =null;
		 RESULT = new Type_ident(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("t_id",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // t_id ::= CHAR 
            {
              Type_ident RESULT =null;
		 RESULT = new Type_ident(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("t_id",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // t_id ::= INTEGER 
            {
              Type_ident RESULT =null;
		 RESULT = new Type_ident(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("t_id",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // simple_t ::= t_id 
            {
              Simple_type RESULT =null;
		int tidleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tidright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Type_ident tid = (Type_ident)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Simple_type (tid); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_t",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // index_r ::= NUMBER DOT DOT NUMBER 
            {
              Index_range RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer n1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer n2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Index_range(n1,n2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("index_r",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // array_t ::= ARRAY LCOR index_r RCOR OF simple_t 
            {
              Array_type RESULT =null;
		int ind_rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int ind_rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Index_range ind_r = (Index_range)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sim_tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sim_tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Simple_type sim_t = (Simple_type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Array_type(ind_r,sim_t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_t",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // type ::= array_t 
            {
              Type RESULT =null;
		int atleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int atright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Array_type at = (Array_type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Type(at); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // type ::= simple_t 
            {
              Type RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Simple_type st = (Simple_type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Type(st); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // parameters ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // p_dec ::= PROCEDURE ID LPAREN parameters RPAREN COLON type 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("p_dec",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // p_dec ::= PROCEDURE ID COLON type 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("p_dec",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // proc_dec ::= p_dec block_p SEMICOLON 
            {
              Procedure_dec RESULT =null;
		int blleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int blright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object bl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc_dec",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // p_d_p ::= 
            {
              Procedure_dec_part RESULT =null;
		 RESULT = new Procedure_dec_part(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("p_d_p",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // p_d_p ::= proc_dec p_d_p 
            {
              Procedure_dec_part RESULT =null;
		int pdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Procedure_dec pd = (Procedure_dec)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pdpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pdpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Procedure_dec_part pdp = (Procedure_dec_part)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 pdp.add(pd); RESULT= pdp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("p_d_p",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // v_dec ::= ID COLON type 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Type tipo = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("v_dec",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // v_dec ::= ID COMMA v_dec 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vd = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("v_dec",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // var_dec ::= 
            {
              Variable_dec RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_dec",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // var_dec ::= v_dec SEMICOLON var_dec 
            {
              Variable_dec RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_dec",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // v_d_p ::= 
            {
              Variable_dec_part RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("v_d_p",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // v_d_p ::= VAR var_dec 
            {
              Variable_dec_part RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Variable_dec vd = (Variable_dec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("v_d_p",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // block_p ::= v_d_p c_stament 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("block_p",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // block ::= v_d_p p_d_p c_stament 
            {
              Block RESULT =null;
		int vdpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vdpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Variable_dec_part vdp = (Variable_dec_part)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pdpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pdpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Procedure_dec_part pdp = (Procedure_dec_part)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int c_sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c_sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Compound_stament c_s = (Compound_stament)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Block (vdp,pdp,c_s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= PROGRAM ID SEMICOLON block DOT 
            {
              Program RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int blockleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int blockright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Block block = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Program (id,block); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

